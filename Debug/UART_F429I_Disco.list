
UART_F429I_Disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000277c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  08002928  08002928  00012928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08003b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  7 .bss          00000034  20000024  20000024  00020024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000058  20000058  00020024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000915a  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001757  00000000  00000000  000291ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b48  00000000  00000000  0002a908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a48  00000000  00000000  0002b450  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000042d9  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003c87  00000000  00000000  00030171  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00033df8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003030  00000000  00000000  00033e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00036ea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002910 	.word	0x08002910

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08002910 	.word	0x08002910

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	460b      	mov	r3, r1
 8000206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000208:	78fb      	ldrb	r3, [r7, #3]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d006      	beq.n	800021c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 0201 	orr.w	r2, r3, #1
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800021a:	e005      	b.n	8000228 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f023 0201 	bic.w	r2, r3, #1
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	601a      	str	r2, [r3, #0]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800023e:	2300      	movs	r3, #0
 8000240:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <DMA_GetFlagStatus+0x6c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d802      	bhi.n	8000254 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <DMA_GetFlagStatus+0x70>)
 8000250:	613b      	str	r3, [r7, #16]
 8000252:	e001      	b.n	8000258 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <DMA_GetFlagStatus+0x74>)
 8000256:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800025e:	2b00      	cmp	r3, #0
 8000260:	d003      	beq.n	800026a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	e002      	b.n	8000270 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000276:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800027a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	4013      	ands	r3, r2
 8000282:	2b00      	cmp	r3, #0
 8000284:	d002      	beq.n	800028c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000286:	2301      	movs	r3, #1
 8000288:	75fb      	strb	r3, [r7, #23]
 800028a:	e001      	b.n	8000290 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800028c:	2300      	movs	r3, #0
 800028e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000290:	7dfb      	ldrb	r3, [r7, #23]
}
 8000292:	4618      	mov	r0, r3
 8000294:	371c      	adds	r7, #28
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	4002640f 	.word	0x4002640f
 80002a4:	40026000 	.word	0x40026000
 80002a8:	40026400 	.word	0x40026400

080002ac <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a10      	ldr	r2, [pc, #64]	; (80002fc <DMA_ClearFlag+0x50>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d802      	bhi.n	80002c4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <DMA_ClearFlag+0x54>)
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	e001      	b.n	80002c8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <DMA_ClearFlag+0x58>)
 80002c6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d007      	beq.n	80002e2 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80002d8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80002e0:	e006      	b.n	80002f0 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80002e8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80002ec:	68fa      	ldr	r2, [r7, #12]
 80002ee:	6093      	str	r3, [r2, #8]
}
 80002f0:	bf00      	nop
 80002f2:	3714      	adds	r7, #20
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	4002640f 	.word	0x4002640f
 8000300:	40026000 	.word	0x40026000
 8000304:	40026400 	.word	0x40026400

08000308 <FMC_SDRAMInit>:
  *         that contains the configuration information for the FMC SDRAM 
  *         specified Banks.                       
  * @retval None
  */
void FMC_SDRAMInit(FMC_SDRAMInitTypeDef* FMC_SDRAMInitStruct)
{ 
 8000308:	b480      	push	{r7}
 800030a:	b087      	sub	sp, #28
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* temporary registers */
  uint32_t tmpr1 = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]
  uint32_t tmpr3 = 0;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr4 = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_WRITE_RECOVERY_TIME(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)); 
  assert_param(IS_FMC_RP_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)); 
  assert_param(IS_FMC_RCD_DELAY(FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay));    
  
  /* SDRAM bank control register configuration */ 
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	685a      	ldr	r2, [r3, #4]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	689b      	ldr	r3, [r3, #8]
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8000328:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68db      	ldr	r3, [r3, #12]
             FMC_SDRAMInitStruct->FMC_RowBitsNumber |
 800032e:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691b      	ldr	r3, [r3, #16]
             FMC_SDRAMInitStruct->FMC_SDMemoryDataWidth |
 8000334:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	695b      	ldr	r3, [r3, #20]
             FMC_SDRAMInitStruct->FMC_InternalBankNumber |           
 800033a:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	699b      	ldr	r3, [r3, #24]
             FMC_SDRAMInitStruct->FMC_CASLatency |
 8000340:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	69db      	ldr	r3, [r3, #28]
             FMC_SDRAMInitStruct->FMC_WriteProtection |
 8000346:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6a1b      	ldr	r3, [r3, #32]
             FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800034c:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  tmpr1 =   (uint32_t)FMC_SDRAMInitStruct->FMC_ColumnBitsNumber |
 8000352:	4313      	orrs	r3, r2
 8000354:	617b      	str	r3, [r7, #20]
            
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d106      	bne.n	800036c <FMC_SDRAMInit+0x64>
  {
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 800035e:	4940      	ldr	r1, [pc, #256]	; (8000460 <FMC_SDRAMInit+0x158>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	697a      	ldr	r2, [r7, #20]
 8000366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800036a:	e011      	b.n	8000390 <FMC_SDRAMInit+0x88>
  }
  else   /* SDCR2 "don't care" bits configuration */
  {
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	69da      	ldr	r2, [r3, #28]
             FMC_SDRAMInitStruct->FMC_ReadBurst | 
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	6a1b      	ldr	r3, [r3, #32]
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 8000374:	431a      	orrs	r2, r3
             FMC_SDRAMInitStruct->FMC_ReadPipeDelay;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpr3 = (uint32_t)FMC_SDRAMInitStruct->FMC_SDClockPeriod |
 800037a:	4313      	orrs	r3, r2
 800037c:	60fb      	str	r3, [r7, #12]
    
    FMC_Bank5_6->SDCR[FMC_Bank1_SDRAM] = tmpr3;
 800037e:	4a38      	ldr	r2, [pc, #224]	; (8000460 <FMC_SDRAMInit+0x158>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	6013      	str	r3, [r2, #0]
    FMC_Bank5_6->SDCR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr1;
 8000384:	4936      	ldr	r1, [pc, #216]	; (8000460 <FMC_SDRAMInit+0x158>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	697a      	ldr	r2, [r7, #20]
 800038c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* SDRAM bank timing register configuration */
  if(FMC_SDRAMInitStruct->FMC_Bank == FMC_Bank1_SDRAM )
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d130      	bne.n	80003fa <FMC_SDRAMInit+0xf2>
  {
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	3b01      	subs	r3, #1
 80003a8:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80003aa:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 80003b6:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003bc:	68db      	ldr	r3, [r3, #12]
 80003be:	3b01      	subs	r3, #1
 80003c0:	031b      	lsls	r3, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 80003c2:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	3b01      	subs	r3, #1
 80003cc:	041b      	lsls	r3, r3, #16
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 80003ce:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20) |
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	051b      	lsls	r3, r3, #20
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16) |
 80003da:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RCDDelay)-1) << 24);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	061b      	lsls	r3, r3, #24
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80003e6:	4313      	orrs	r3, r2
 80003e8:	613b      	str	r3, [r7, #16]
            
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 80003ea:	491d      	ldr	r1, [pc, #116]	; (8000460 <FMC_SDRAMInit+0x158>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3302      	adds	r3, #2
 80003f2:	693a      	ldr	r2, [r7, #16]
 80003f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
  }
  
}
 80003f8:	e02c      	b.n	8000454 <FMC_SDRAMInit+0x14c>
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1e5a      	subs	r2, r3, #1
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	3b01      	subs	r3, #1
 800040a:	011b      	lsls	r3, r3, #4
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 800040c:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_SelfRefreshTime)-1) << 8) |
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	3b01      	subs	r3, #1
 8000416:	021b      	lsls	r3, r3, #8
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_ExitSelfRefreshDelay)-1) << 4) |
 8000418:	431a      	orrs	r2, r3
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_WriteRecoveryTime)-1) << 16);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800041e:	691b      	ldr	r3, [r3, #16]
 8000420:	3b01      	subs	r3, #1
 8000422:	041b      	lsls	r3, r3, #16
    tmpr2 =   (uint32_t)((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_LoadToActiveDelay)-1) |
 8000424:	4313      	orrs	r3, r2
 8000426:	613b      	str	r3, [r7, #16]
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	3b01      	subs	r3, #1
 8000430:	031a      	lsls	r2, r3, #12
            (((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RPDelay)-1) << 20);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	3b01      	subs	r3, #1
 800043a:	051b      	lsls	r3, r3, #20
    tmpr4 =   (uint32_t)(((FMC_SDRAMInitStruct->FMC_SDRAMTimingStruct->FMC_RowCycleDelay)-1) << 12) |
 800043c:	4313      	orrs	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
            FMC_Bank5_6->SDTR[FMC_Bank1_SDRAM] = tmpr4;
 8000440:	4a07      	ldr	r2, [pc, #28]	; (8000460 <FMC_SDRAMInit+0x158>)
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	6093      	str	r3, [r2, #8]
            FMC_Bank5_6->SDTR[FMC_SDRAMInitStruct->FMC_Bank] = tmpr2;
 8000446:	4906      	ldr	r1, [pc, #24]	; (8000460 <FMC_SDRAMInit+0x158>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	3302      	adds	r3, #2
 800044e:	693a      	ldr	r2, [r7, #16]
 8000450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000454:	bf00      	nop
 8000456:	371c      	adds	r7, #28
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	a0000140 	.word	0xa0000140

08000464 <FMC_SDRAMCmdConfig>:
  * @param  FMC_SDRAMCommandStruct: pointer to a FMC_SDRAMCommandTypeDef structure 
  *         which will be configured.
  * @retval None
  */
void FMC_SDRAMCmdConfig(FMC_SDRAMCommandTypeDef* FMC_SDRAMCommandStruct)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  uint32_t tmpr = 0x0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FMC_COMMAND_MODE(FMC_SDRAMCommandStruct->FMC_CommandMode));
  assert_param(IS_FMC_COMMAND_TARGET(FMC_SDRAMCommandStruct->FMC_CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition));
  
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681a      	ldr	r2, [r3, #0]
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685b      	ldr	r3, [r3, #4]
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 8000478:	431a      	orrs	r2, r3
                     (((FMC_SDRAMCommandStruct->FMC_AutoRefreshNumber)-1)<<5) |
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	3b01      	subs	r3, #1
 8000480:	015b      	lsls	r3, r3, #5
                      FMC_SDRAMCommandStruct->FMC_CommandTarget |
 8000482:	431a      	orrs	r2, r3
                     ((FMC_SDRAMCommandStruct->FMC_ModeRegisterDefinition)<<9));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	025b      	lsls	r3, r3, #9
  tmpr =   (uint32_t)(FMC_SDRAMCommandStruct->FMC_CommandMode |
 800048a:	4313      	orrs	r3, r2
 800048c:	60fb      	str	r3, [r7, #12]
  
  FMC_Bank5_6->SDCMR = tmpr;
 800048e:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <FMC_SDRAMCmdConfig+0x3c>)
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	6113      	str	r3, [r2, #16]

}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	a0000140 	.word	0xa0000140

080004a4 <FMC_SetRefreshCount>:
  * @brief  defines the SDRAM Memory Refresh rate.
  * @param  FMC_Count: specifies the Refresh timer count.       
  * @retval None
  */
void FMC_SetRefreshCount(uint32_t FMC_Count)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* check the parameters */
  assert_param(IS_FMC_REFRESH_COUNT(FMC_Count));
  
  FMC_Bank5_6->SDRTR |= (FMC_Count<<1);
 80004ac:	4906      	ldr	r1, [pc, #24]	; (80004c8 <FMC_SetRefreshCount+0x24>)
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <FMC_SetRefreshCount+0x24>)
 80004b0:	695a      	ldr	r2, [r3, #20]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4313      	orrs	r3, r2
 80004b8:	614b      	str	r3, [r1, #20]
   
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	a0000140 	.word	0xa0000140

080004cc <FMC_GetFlagStatus>:
  *            @arg FMC_FLAG_Refresh: Refresh error Flag.
  *            @arg FMC_FLAG_Busy: Busy status Flag.     
  * @retval The new state of FMC_FLAG (SET or RESET).
  */
FlagStatus FMC_GetFlagStatus(uint32_t FMC_Bank, uint32_t FMC_FLAG)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FMC_GETFLAG_BANK(FMC_Bank));
  assert_param(IS_FMC_GET_FLAG(FMC_FLAG));
  
  if(FMC_Bank == FMC_Bank2_NAND)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b10      	cmp	r3, #16
 80004e2:	d103      	bne.n	80004ec <FMC_GetFlagStatus+0x20>
  {
    tmpsr = FMC_Bank2->SR2;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <FMC_GetFlagStatus+0x6c>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	e012      	b.n	8000512 <FMC_GetFlagStatus+0x46>
  }  
  else if(FMC_Bank == FMC_Bank3_NAND)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004f2:	d103      	bne.n	80004fc <FMC_GetFlagStatus+0x30>
  {
    tmpsr = FMC_Bank3->SR3;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <FMC_GetFlagStatus+0x70>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	e00a      	b.n	8000512 <FMC_GetFlagStatus+0x46>
  }
  else if(FMC_Bank == FMC_Bank4_PCCARD)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000502:	d103      	bne.n	800050c <FMC_GetFlagStatus+0x40>
  {
    tmpsr = FMC_Bank4->SR4;
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <FMC_GetFlagStatus+0x74>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	e002      	b.n	8000512 <FMC_GetFlagStatus+0x46>
  }
  else 
  {
    tmpsr = FMC_Bank5_6->SDSR;
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <FMC_GetFlagStatus+0x78>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	60bb      	str	r3, [r7, #8]
  }
  
  /* Get the flag status */
  if ((tmpsr & FMC_FLAG) != FMC_FLAG )
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	401a      	ands	r2, r3
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	429a      	cmp	r2, r3
 800051c:	d002      	beq.n	8000524 <FMC_GetFlagStatus+0x58>
  {
    bitstatus = RESET;
 800051e:	2300      	movs	r3, #0
 8000520:	73fb      	strb	r3, [r7, #15]
 8000522:	e001      	b.n	8000528 <FMC_GetFlagStatus+0x5c>
  }
  else
  {
    bitstatus = SET;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	a0000060 	.word	0xa0000060
 800053c:	a0000080 	.word	0xa0000080
 8000540:	a00000a0 	.word	0xa00000a0
 8000544:	a0000140 	.word	0xa0000140

08000548 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	e076      	b.n	8000652 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000564:	2201      	movs	r2, #1
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	429a      	cmp	r2, r3
 800057e:	d165      	bne.n	800064c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	2103      	movs	r1, #3
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	401a      	ands	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	4619      	mov	r1, r3
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	431a      	orrs	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d003      	beq.n	80005be <GPIO_Init+0x76>
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d12e      	bne.n	800061c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	2103      	movs	r1, #3
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	401a      	ands	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	689a      	ldr	r2, [r3, #8]
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	4619      	mov	r1, r3
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	431a      	orrs	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	2301      	movs	r3, #1
 80005f8:	408b      	lsls	r3, r1
 80005fa:	43db      	mvns	r3, r3
 80005fc:	401a      	ands	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	7992      	ldrb	r2, [r2, #6]
 800060a:	4611      	mov	r1, r2
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	b292      	uxth	r2, r2
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	b292      	uxth	r2, r2
 8000616:	431a      	orrs	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	b29b      	uxth	r3, r3
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2103      	movs	r1, #3
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	401a      	ands	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	68da      	ldr	r2, [r3, #12]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	79db      	ldrb	r3, [r3, #7]
 800063c:	4619      	mov	r1, r3
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	431a      	orrs	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3301      	adds	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d985      	bls.n	8000564 <GPIO_Init+0x1c>
    }
  }
}
 8000658:	bf00      	nop
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2200      	movs	r2, #0
 800068a:	71da      	strb	r2, [r3, #7]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	887a      	ldrh	r2, [r7, #2]
 80006a8:	831a      	strh	r2, [r3, #24]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	460b      	mov	r3, r1
 80006c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	887a      	ldrh	r2, [r7, #2]
 80006c6:	835a      	strh	r2, [r3, #26]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
 80006e0:	4613      	mov	r3, r2
 80006e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80006e4:	787b      	ldrb	r3, [r7, #1]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	887a      	ldrh	r2, [r7, #2]
 80006ee:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80006f0:	e002      	b.n	80006f8 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	887a      	ldrh	r2, [r7, #2]
 80006f6:	835a      	strh	r2, [r3, #26]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
 8000710:	4613      	mov	r3, r2
 8000712:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800071c:	787a      	ldrb	r2, [r7, #1]
 800071e:	887b      	ldrh	r3, [r7, #2]
 8000720:	f003 0307 	and.w	r3, r3, #7
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	08db      	lsrs	r3, r3, #3
 8000730:	b29b      	uxth	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	08db      	lsrs	r3, r3, #3
 8000738:	b29b      	uxth	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3208      	adds	r2, #8
 8000740:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	210f      	movs	r1, #15
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43db      	mvns	r3, r3
 8000754:	ea02 0103 	and.w	r1, r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f100 0208 	add.w	r2, r0, #8
 800075e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000762:	887b      	ldrh	r3, [r7, #2]
 8000764:	08db      	lsrs	r3, r3, #3
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3208      	adds	r2, #8
 800076e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	4313      	orrs	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000778:	887b      	ldrh	r3, [r7, #2]
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	b29b      	uxth	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3208      	adds	r2, #8
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80007b8:	e007      	b.n	80007ca <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	801a      	strh	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b087      	sub	sp, #28
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	0f1b      	lsrs	r3, r3, #28
 80007f4:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007fc:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	3314      	adds	r3, #20
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e005      	b.n	8000818 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	0c1b      	lsrs	r3, r3, #16
 8000810:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	3318      	adds	r3, #24
 8000816:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	4013      	ands	r3, r2
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000824:	2301      	movs	r3, #1
 8000826:	75fb      	strb	r3, [r7, #23]
 8000828:	e001      	b.n	800082e <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800082e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000830:	4618      	mov	r0, r3
 8000832:	371c      	adds	r7, #28
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 800083c:	b480      	push	{r7}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800085c:	4940      	ldr	r1, [pc, #256]	; (8000960 <LTDC_Init+0x124>)
 800085e:	4b40      	ldr	r3, [pc, #256]	; (8000960 <LTDC_Init+0x124>)
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	4b40      	ldr	r3, [pc, #256]	; (8000964 <LTDC_Init+0x128>)
 8000864:	4013      	ands	r3, r2
 8000866:	608b      	str	r3, [r1, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	041b      	lsls	r3, r3, #16
 800086e:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8000870:	483b      	ldr	r0, [pc, #236]	; (8000960 <LTDC_Init+0x124>)
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <LTDC_Init+0x124>)
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6959      	ldr	r1, [r3, #20]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	430b      	orrs	r3, r1
 800087e:	4313      	orrs	r3, r2
 8000880:	6083      	str	r3, [r0, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000882:	4937      	ldr	r1, [pc, #220]	; (8000960 <LTDC_Init+0x124>)
 8000884:	4b36      	ldr	r3, [pc, #216]	; (8000960 <LTDC_Init+0x124>)
 8000886:	68da      	ldr	r2, [r3, #12]
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <LTDC_Init+0x128>)
 800088a:	4013      	ands	r3, r2
 800088c:	60cb      	str	r3, [r1, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	041b      	lsls	r3, r3, #16
 8000894:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 8000896:	4832      	ldr	r0, [pc, #200]	; (8000960 <LTDC_Init+0x124>)
 8000898:	4b31      	ldr	r3, [pc, #196]	; (8000960 <LTDC_Init+0x124>)
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69d9      	ldr	r1, [r3, #28]
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	430b      	orrs	r3, r1
 80008a4:	4313      	orrs	r3, r2
 80008a6:	60c3      	str	r3, [r0, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80008a8:	492d      	ldr	r1, [pc, #180]	; (8000960 <LTDC_Init+0x124>)
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <LTDC_Init+0x124>)
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <LTDC_Init+0x128>)
 80008b0:	4013      	ands	r3, r2
 80008b2:	610b      	str	r3, [r1, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a1b      	ldr	r3, [r3, #32]
 80008b8:	041b      	lsls	r3, r3, #16
 80008ba:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 80008bc:	4828      	ldr	r0, [pc, #160]	; (8000960 <LTDC_Init+0x124>)
 80008be:	4b28      	ldr	r3, [pc, #160]	; (8000960 <LTDC_Init+0x124>)
 80008c0:	691a      	ldr	r2, [r3, #16]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	430b      	orrs	r3, r1
 80008ca:	4313      	orrs	r3, r2
 80008cc:	6103      	str	r3, [r0, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80008ce:	4924      	ldr	r1, [pc, #144]	; (8000960 <LTDC_Init+0x124>)
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <LTDC_Init+0x124>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <LTDC_Init+0x128>)
 80008d6:	4013      	ands	r3, r2
 80008d8:	614b      	str	r3, [r1, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008de:	041b      	lsls	r3, r3, #16
 80008e0:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 80008e2:	481f      	ldr	r0, [pc, #124]	; (8000960 <LTDC_Init+0x124>)
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <LTDC_Init+0x124>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	430b      	orrs	r3, r1
 80008f0:	4313      	orrs	r3, r2
 80008f2:	6143      	str	r3, [r0, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 80008f4:	491a      	ldr	r1, [pc, #104]	; (8000960 <LTDC_Init+0x124>)
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <LTDC_Init+0x124>)
 80008f8:	699a      	ldr	r2, [r3, #24]
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <LTDC_Init+0x12c>)
 80008fc:	4013      	ands	r3, r2
 80008fe:	618b      	str	r3, [r1, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8000900:	4817      	ldr	r0, [pc, #92]	; (8000960 <LTDC_Init+0x124>)
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <LTDC_Init+0x124>)
 8000904:	699a      	ldr	r2, [r3, #24]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 8000914:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	430b      	orrs	r3, r1
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 800091c:	4313      	orrs	r3, r2
 800091e:	6183      	str	r3, [r0, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	041b      	lsls	r3, r3, #16
 800092e:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LTDC_Init+0x124>)
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <LTDC_Init+0x124>)
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800093a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <LTDC_Init+0x124>)
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <LTDC_Init+0x124>)
 8000940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000942:	68b9      	ldr	r1, [r7, #8]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4319      	orrs	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800094c:	430b      	orrs	r3, r1
 800094e:	4313      	orrs	r3, r2
 8000950:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8000952:	bf00      	nop
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40016800 	.word	0x40016800
 8000964:	f000f800 	.word	0xf000f800
 8000968:	0ffe888f 	.word	0x0ffe888f

0800096c <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d006      	beq.n	800098a <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <LTDC_Cmd+0x38>)
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <LTDC_Cmd+0x38>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
  }
}
 8000988:	e005      	b.n	8000996 <LTDC_Cmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 800098a:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <LTDC_Cmd+0x38>)
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <LTDC_Cmd+0x38>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40016800 	.word	0x40016800

080009a8 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d006      	beq.n	80009c6 <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 80009b8:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <LTDC_DitherCmd+0x38>)
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <LTDC_DitherCmd+0x38>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c2:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
  }
}
 80009c4:	e005      	b.n	80009d2 <LTDC_DitherCmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 80009c6:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <LTDC_DitherCmd+0x38>)
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <LTDC_DitherCmd+0x38>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009d0:	6193      	str	r3, [r2, #24]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40016800 	.word	0x40016800

080009e4 <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <LTDC_ReloadConfig+0x1c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40016800 	.word	0x40016800

08000a04 <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	041b      	lsls	r3, r3, #16
 8000a2c:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	041b      	lsls	r3, r3, #16
 8000a4c:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	691b      	ldr	r3, [r3, #16]
 8000a6a:	f023 0207 	bic.w	r2, r3, #7
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	6a1b      	ldr	r3, [r3, #32]
 8000a86:	041b      	lsls	r3, r3, #16
 8000a88:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8e:	061b      	lsls	r3, r3, #24
 8000a90:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	699a      	ldr	r2, [r3, #24]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	431a      	orrs	r2, r3
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	619a      	str	r2, [r3, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	695a      	ldr	r2, [r3, #20]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000acc:	f023 0307 	bic.w	r3, r3, #7
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	431a      	orrs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b00:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000b1c:	f023 0307 	bic.w	r3, r3, #7
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30

}
 8000b2c:	bf00      	nop
 8000b2e:	3724      	adds	r7, #36	; 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d006      	beq.n	8000b58 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
  }
}
 8000b56:	e005      	b.n	8000b64 <LTDC_LayerCmd+0x2c>
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 0201 	bic.w	r2, r3, #1
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000b7c:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <RCC_PLLSAIConfig+0x30>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	019a      	lsls	r2, r3, #6
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	061b      	lsls	r3, r3, #24
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	071b      	lsls	r3, r3, #28
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <RCC_PLLSAICmd+0x1c>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	42470070 	.word	0x42470070

08000bc4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	2302      	movs	r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	2302      	movs	r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000be4:	4b47      	ldr	r3, [pc, #284]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d007      	beq.n	8000c04 <RCC_GetClocksFreq+0x40>
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d009      	beq.n	8000c0c <RCC_GetClocksFreq+0x48>
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d13d      	bne.n	8000c78 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <RCC_GetClocksFreq+0x144>)
 8000c00:	601a      	str	r2, [r3, #0]
      break;
 8000c02:	e03d      	b.n	8000c80 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a41      	ldr	r2, [pc, #260]	; (8000d0c <RCC_GetClocksFreq+0x148>)
 8000c08:	601a      	str	r2, [r3, #0]
      break;
 8000c0a:	e039      	b.n	8000c80 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	0d9b      	lsrs	r3, r3, #22
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c18:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c20:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00c      	beq.n	8000c42 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c28:	4a38      	ldr	r2, [pc, #224]	; (8000d0c <RCC_GetClocksFreq+0x148>)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c30:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000c32:	6852      	ldr	r2, [r2, #4]
 8000c34:	0992      	lsrs	r2, r2, #6
 8000c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c3a:	fb02 f303 	mul.w	r3, r2, r3
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	e00b      	b.n	8000c5a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c42:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <RCC_GetClocksFreq+0x144>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000c4c:	6852      	ldr	r2, [r2, #4]
 8000c4e:	0992      	lsrs	r2, r2, #6
 8000c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c54:	fb02 f303 	mul.w	r3, r2, r3
 8000c58:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	3301      	adds	r3, #1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
      break;
 8000c76:	e003      	b.n	8000c80 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <RCC_GetClocksFreq+0x144>)
 8000c7c:	601a      	str	r2, [r3, #0]
      break;
 8000c7e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000c90:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <RCC_GetClocksFreq+0x14c>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	40da      	lsrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cb0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	0a9b      	lsrs	r3, r3, #10
 8000cb6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cb8:	4a15      	ldr	r2, [pc, #84]	; (8000d10 <RCC_GetClocksFreq+0x14c>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	40da      	lsrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <RCC_GetClocksFreq+0x140>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000cd8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	0b5b      	lsrs	r3, r3, #13
 8000cde:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <RCC_GetClocksFreq+0x14c>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	40da      	lsrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	60da      	str	r2, [r3, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3724      	adds	r7, #36	; 0x24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	40023800 	.word	0x40023800
 8000d08:	00f42400 	.word	0x00f42400
 8000d0c:	007a1200 	.word	0x007a1200
 8000d10:	20000000 	.word	0x20000000

08000d14 <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <RCC_LTDCCLKDivConfig+0x38>)
 8000d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d26:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000d2e:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <RCC_LTDCCLKDivConfig+0x38>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40023800 	.word	0x40023800

08000d50 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000d62:	490a      	ldr	r1, [pc, #40]	; (8000d8c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000d6e:	e006      	b.n	8000d7e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000d70:	4906      	ldr	r1, [pc, #24]	; (8000d8c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d9c:	78fb      	ldrb	r3, [r7, #3]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000da2:	490a      	ldr	r1, [pc, #40]	; (8000dcc <RCC_AHB3PeriphClockCmd+0x3c>)
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <RCC_AHB3PeriphClockCmd+0x3c>)
 8000da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 8000dae:	e006      	b.n	8000dbe <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8000db0:	4906      	ldr	r1, [pc, #24]	; (8000dcc <RCC_AHB3PeriphClockCmd+0x3c>)
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <RCC_AHB3PeriphClockCmd+0x3c>)
 8000db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	638b      	str	r3, [r1, #56]	; 0x38
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000de2:	490a      	ldr	r1, [pc, #40]	; (8000e0c <RCC_APB2PeriphClockCmd+0x3c>)
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <RCC_APB2PeriphClockCmd+0x3c>)
 8000de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000dee:	e006      	b.n	8000dfe <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000df0:	4906      	ldr	r1, [pc, #24]	; (8000e0c <RCC_APB2PeriphClockCmd+0x3c>)
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <RCC_APB2PeriphClockCmd+0x3c>)
 8000df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000e22:	490a      	ldr	r1, [pc, #40]	; (8000e4c <RCC_APB1PeriphResetCmd+0x3c>)
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <RCC_APB1PeriphResetCmd+0x3c>)
 8000e26:	6a1a      	ldr	r2, [r3, #32]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000e2e:	e006      	b.n	8000e3e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000e30:	4906      	ldr	r1, [pc, #24]	; (8000e4c <RCC_APB1PeriphResetCmd+0x3c>)
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <RCC_APB1PeriphResetCmd+0x3c>)
 8000e34:	6a1a      	ldr	r2, [r3, #32]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	620b      	str	r3, [r1, #32]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000e62:	490a      	ldr	r1, [pc, #40]	; (8000e8c <RCC_APB2PeriphResetCmd+0x3c>)
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <RCC_APB2PeriphResetCmd+0x3c>)
 8000e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000e6e:	e006      	b.n	8000e7e <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000e70:	4906      	ldr	r1, [pc, #24]	; (8000e8c <RCC_APB2PeriphResetCmd+0x3c>)
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <RCC_APB2PeriphResetCmd+0x3c>)
 8000e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	095b      	lsrs	r3, r3, #5
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d103      	bne.n	8000ebc <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <RCC_GetFlagStatus+0x70>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e009      	b.n	8000ed0 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d103      	bne.n	8000eca <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <RCC_GetFlagStatus+0x70>)
 8000ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	e002      	b.n	8000ed0 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <RCC_GetFlagStatus+0x70>)
 8000ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ece:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	74fb      	strb	r3, [r7, #19]
 8000eec:	e001      	b.n	8000ef2 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000ef2:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40023800 	.word	0x40023800

08000f04 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a2e      	ldr	r2, [pc, #184]	; (8000fc8 <SPI_I2S_DeInit+0xc4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d10a      	bne.n	8000f2a <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8000f14:	2101      	movs	r1, #1
 8000f16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f1a:	f7ff ff99 	bl	8000e50 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f24:	f7ff ff94 	bl	8000e50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8000f28:	e049      	b.n	8000fbe <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <SPI_I2S_DeInit+0xc8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10a      	bne.n	8000f48 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8000f32:	2101      	movs	r1, #1
 8000f34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f38:	f7ff ff6a 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f42:	f7ff ff65 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 8000f46:	e03a      	b.n	8000fbe <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <SPI_I2S_DeInit+0xcc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10a      	bne.n	8000f66 <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8000f50:	2101      	movs	r1, #1
 8000f52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f56:	f7ff ff5b 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f60:	f7ff ff56 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 8000f64:	e02b      	b.n	8000fbe <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a1a      	ldr	r2, [pc, #104]	; (8000fd4 <SPI_I2S_DeInit+0xd0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d10a      	bne.n	8000f84 <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f74:	f7ff ff6c 	bl	8000e50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f7e:	f7ff ff67 	bl	8000e50 <RCC_APB2PeriphResetCmd>
}
 8000f82:	e01c      	b.n	8000fbe <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <SPI_I2S_DeInit+0xd4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d10a      	bne.n	8000fa2 <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f92:	f7ff ff5d 	bl	8000e50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 8000f96:	2100      	movs	r1, #0
 8000f98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000f9c:	f7ff ff58 	bl	8000e50 <RCC_APB2PeriphResetCmd>
}
 8000fa0:	e00d      	b.n	8000fbe <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <SPI_I2S_DeInit+0xd8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d109      	bne.n	8000fbe <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8000faa:	2101      	movs	r1, #1
 8000fac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000fb0:	f7ff ff4e 	bl	8000e50 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000fba:	f7ff ff49 	bl	8000e50 <RCC_APB2PeriphResetCmd>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40013000 	.word	0x40013000
 8000fcc:	40003800 	.word	0x40003800
 8000fd0:	40003c00 	.word	0x40003c00
 8000fd4:	40013400 	.word	0x40013400
 8000fd8:	40015000 	.word	0x40015000
 8000fdc:	40015400 	.word	0x40015400

08000fe0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000ffa:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	885b      	ldrh	r3, [r3, #2]
 8001004:	4313      	orrs	r3, r2
 8001006:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800100c:	4313      	orrs	r3, r2
 800100e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001014:	4313      	orrs	r3, r2
 8001016:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800101c:	4313      	orrs	r3, r2
 800101e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001024:	4313      	orrs	r3, r2
 8001026:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800102c:	4313      	orrs	r3, r2
 800102e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001034:	4313      	orrs	r3, r2
 8001036:	b29a      	uxth	r2, r3
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	4313      	orrs	r3, r2
 800103c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	89fa      	ldrh	r2, [r7, #14]
 8001042:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8b9b      	ldrh	r3, [r3, #28]
 8001048:	b29b      	uxth	r3, r3
 800104a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800104e:	b29a      	uxth	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	8a1a      	ldrh	r2, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	821a      	strh	r2, [r3, #16]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d008      	beq.n	800108c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800108a:	e007      	b.n	800109c <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	801a      	strh	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	819a      	strh	r2, [r3, #12]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	891b      	ldrh	r3, [r3, #8]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	4013      	ands	r3, r2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e001      	b.n	80010f0 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3b      	ldr	r2, [pc, #236]	; (80011f8 <USART_DeInit+0xf8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d108      	bne.n	8001122 <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8001110:	2101      	movs	r1, #1
 8001112:	2010      	movs	r0, #16
 8001114:	f7ff fe9c 	bl	8000e50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8001118:	2100      	movs	r1, #0
 800111a:	2010      	movs	r0, #16
 800111c:	f7ff fe98 	bl	8000e50 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8001120:	e065      	b.n	80011ee <USART_DeInit+0xee>
  else if (USARTx == USART2)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a35      	ldr	r2, [pc, #212]	; (80011fc <USART_DeInit+0xfc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10a      	bne.n	8001140 <USART_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800112a:	2101      	movs	r1, #1
 800112c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001130:	f7ff fe6e 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001134:	2100      	movs	r1, #0
 8001136:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800113a:	f7ff fe69 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 800113e:	e056      	b.n	80011ee <USART_DeInit+0xee>
  else if (USARTx == USART3)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <USART_DeInit+0x100>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d10a      	bne.n	800115e <USART_DeInit+0x5e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8001148:	2101      	movs	r1, #1
 800114a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800114e:	f7ff fe5f 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8001152:	2100      	movs	r1, #0
 8001154:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001158:	f7ff fe5a 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 800115c:	e047      	b.n	80011ee <USART_DeInit+0xee>
  else if (USARTx == UART4)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a28      	ldr	r2, [pc, #160]	; (8001204 <USART_DeInit+0x104>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d10a      	bne.n	800117c <USART_DeInit+0x7c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8001166:	2101      	movs	r1, #1
 8001168:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800116c:	f7ff fe50 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8001170:	2100      	movs	r1, #0
 8001172:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001176:	f7ff fe4b 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 800117a:	e038      	b.n	80011ee <USART_DeInit+0xee>
  else if (USARTx == UART5)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <USART_DeInit+0x108>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d10a      	bne.n	800119a <USART_DeInit+0x9a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8001184:	2101      	movs	r1, #1
 8001186:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800118a:	f7ff fe41 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800118e:	2100      	movs	r1, #0
 8001190:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001194:	f7ff fe3c 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 8001198:	e029      	b.n	80011ee <USART_DeInit+0xee>
  else if (USARTx == USART6)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a1b      	ldr	r2, [pc, #108]	; (800120c <USART_DeInit+0x10c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d108      	bne.n	80011b4 <USART_DeInit+0xb4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80011a2:	2101      	movs	r1, #1
 80011a4:	2020      	movs	r0, #32
 80011a6:	f7ff fe53 	bl	8000e50 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80011aa:	2100      	movs	r1, #0
 80011ac:	2020      	movs	r0, #32
 80011ae:	f7ff fe4f 	bl	8000e50 <RCC_APB2PeriphResetCmd>
}
 80011b2:	e01c      	b.n	80011ee <USART_DeInit+0xee>
  else if (USARTx == UART7)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <USART_DeInit+0x110>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d10a      	bne.n	80011d2 <USART_DeInit+0xd2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 80011bc:	2101      	movs	r1, #1
 80011be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011c2:	f7ff fe25 	bl	8000e10 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 80011c6:	2100      	movs	r1, #0
 80011c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011cc:	f7ff fe20 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 80011d0:	e00d      	b.n	80011ee <USART_DeInit+0xee>
    if (USARTx == UART8)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <USART_DeInit+0x114>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d109      	bne.n	80011ee <USART_DeInit+0xee>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 80011da:	2101      	movs	r1, #1
 80011dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80011e0:	f7ff fe16 	bl	8000e10 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 80011e4:	2100      	movs	r1, #0
 80011e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80011ea:	f7ff fe11 	bl	8000e10 <RCC_APB1PeriphResetCmd>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40004400 	.word	0x40004400
 8001200:	40004800 	.word	0x40004800
 8001204:	40004c00 	.word	0x40004c00
 8001208:	40005000 	.word	0x40005000
 800120c:	40011400 	.word	0x40011400
 8001210:	40007800 	.word	0x40007800
 8001214:	40007c00 	.word	0x40007c00

08001218 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	8a1b      	ldrh	r3, [r3, #16]
 8001236:	b29b      	uxth	r3, r3
 8001238:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	88db      	ldrh	r3, [r3, #6]
 8001246:	461a      	mov	r2, r3
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	4313      	orrs	r3, r2
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	b29a      	uxth	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	899b      	ldrh	r3, [r3, #12]
 800125a:	b29b      	uxth	r3, r3
 800125c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001264:	f023 030c 	bic.w	r3, r3, #12
 8001268:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	889a      	ldrh	r2, [r3, #4]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	891b      	ldrh	r3, [r3, #8]
 8001272:	4313      	orrs	r3, r2
 8001274:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800127a:	4313      	orrs	r3, r2
 800127c:	b29b      	uxth	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	4313      	orrs	r3, r2
 8001284:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8a9b      	ldrh	r3, [r3, #20]
 8001292:	b29b      	uxth	r3, r3
 8001294:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800129c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	899b      	ldrh	r3, [r3, #12]
 80012a2:	461a      	mov	r2, r3
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	4313      	orrs	r3, r2
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fc84 	bl	8000bc4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a30      	ldr	r2, [pc, #192]	; (8001380 <USART_Init+0x168>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d003      	beq.n	80012cc <USART_Init+0xb4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a2f      	ldr	r2, [pc, #188]	; (8001384 <USART_Init+0x16c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d102      	bne.n	80012d2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	623b      	str	r3, [r7, #32]
 80012d0:	e001      	b.n	80012d6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	899b      	ldrh	r3, [r3, #12]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b21b      	sxth	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	da0c      	bge.n	80012fc <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80012e2:	6a3a      	ldr	r2, [r7, #32]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	009a      	lsls	r2, r3, #2
 80012ec:	441a      	add	r2, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e00b      	b.n	8001314 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80012fc:	6a3a      	ldr	r2, [r7, #32]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009a      	lsls	r2, r3, #2
 8001306:	441a      	add	r2, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <USART_Init+0x170>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	095b      	lsrs	r3, r3, #5
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	2264      	movs	r2, #100	; 0x64
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	899b      	ldrh	r3, [r3, #12]
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21b      	sxth	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	da0c      	bge.n	8001358 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	3332      	adds	r3, #50	; 0x32
 8001344:	4a10      	ldr	r2, [pc, #64]	; (8001388 <USART_Init+0x170>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	4313      	orrs	r3, r2
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
 8001356:	e00b      	b.n	8001370 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	3332      	adds	r3, #50	; 0x32
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <USART_Init+0x170>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136c:	4313      	orrs	r3, r2
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	811a      	strh	r2, [r3, #8]
}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40011000 	.word	0x40011000
 8001384:	40011400 	.word	0x40011400
 8001388:	51eb851f 	.word	0x51eb851f

0800138c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800139a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	220c      	movs	r2, #12
 80013b2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	819a      	strh	r2, [r3, #12]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	8a1b      	ldrh	r3, [r3, #16]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013e2:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	881a      	ldrh	r2, [r3, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	889b      	ldrh	r3, [r3, #4]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	88db      	ldrh	r3, [r3, #6]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	b29a      	uxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	821a      	strh	r2, [r3, #16]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	80da      	strh	r2, [r3, #6]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d008      	beq.n	800146c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	899b      	ldrh	r3, [r3, #12]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001464:	b29a      	uxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800146a:	e007      	b.n	800147c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	899b      	ldrh	r3, [r3, #12]
 8001470:	b29b      	uxth	r3, r3
 8001472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001476:	b29a      	uxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	819a      	strh	r2, [r3, #12]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	889b      	ldrh	r3, [r3, #4]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800149a:	b29b      	uxth	r3, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	4013      	ands	r3, r2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80014c8:	2301      	movs	r3, #1
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e001      	b.n	80014d2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 80014e4:	4916      	ldr	r1, [pc, #88]	; (8001540 <DMA1_Stream4_IRQHandler+0x60>)
 80014e6:	4817      	ldr	r0, [pc, #92]	; (8001544 <DMA1_Stream4_IRQHandler+0x64>)
 80014e8:	f7fe fea4 	bl	8000234 <DMA_GetFlagStatus>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d024      	beq.n	800153c <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 80014f2:	2100      	movs	r1, #0
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <DMA1_Stream4_IRQHandler+0x64>)
 80014f6:	f7fe fe81 	bl	80001fc <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 80014fa:	4911      	ldr	r1, [pc, #68]	; (8001540 <DMA1_Stream4_IRQHandler+0x60>)
 80014fc:	4811      	ldr	r0, [pc, #68]	; (8001544 <DMA1_Stream4_IRQHandler+0x64>)
 80014fe:	f7fe fed5 	bl	80002ac <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <DMA1_Stream4_IRQHandler+0x68>)
 8001504:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001508:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800150a:	e008      	b.n	800151e <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <DMA1_Stream4_IRQHandler+0x68>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	490d      	ldr	r1, [pc, #52]	; (8001548 <DMA1_Stream4_IRQHandler+0x68>)
 8001514:	600a      	str	r2, [r1, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <DMA1_Stream4_IRQHandler+0x3e>
 800151a:	f001 f84d 	bl	80025b8 <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800151e:	490b      	ldr	r1, [pc, #44]	; (800154c <DMA1_Stream4_IRQHandler+0x6c>)
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <DMA1_Stream4_IRQHandler+0x70>)
 8001522:	f7ff f958 	bl	80007d6 <I2C_GetFlagStatus>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ef      	beq.n	800150c <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800152c:	2101      	movs	r1, #1
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <DMA1_Stream4_IRQHandler+0x70>)
 8001530:	f7ff f931 	bl	8000796 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <DMA1_Stream4_IRQHandler+0x74>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
  }
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000020 	.word	0x20000020
 8001544:	40026070 	.word	0x40026070
 8001548:	20000018 	.word	0x20000018
 800154c:	10000004 	.word	0x10000004
 8001550:	40005c00 	.word	0x40005c00
 8001554:	2000004c 	.word	0x2000004c

08001558 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 800155c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <DMA1_Stream2_IRQHandler+0x3c>)
 8001562:	f7fe fe67 	bl	8000234 <DMA_GetFlagStatus>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d010      	beq.n	800158e <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 800156c:	2101      	movs	r1, #1
 800156e:	480a      	ldr	r0, [pc, #40]	; (8001598 <DMA1_Stream2_IRQHandler+0x40>)
 8001570:	f7ff f911 	bl	8000796 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8001574:	2100      	movs	r1, #0
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <DMA1_Stream2_IRQHandler+0x3c>)
 8001578:	f7fe fe40 	bl	80001fc <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 800157c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <DMA1_Stream2_IRQHandler+0x3c>)
 8001582:	f7fe fe93 	bl	80002ac <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <DMA1_Stream2_IRQHandler+0x44>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2200      	movs	r2, #0
 800158c:	801a      	strh	r2, [r3, #0]
  }
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40026040 	.word	0x40026040
 8001598:	40005c00 	.word	0x40005c00
 800159c:	20000054 	.word	0x20000054

080015a0 <LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval None
  */
void LCD_Init(void)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b092      	sub	sp, #72	; 0x48
 80015a4:	af00      	add	r7, sp, #0
  LTDC_InitTypeDef       LTDC_InitStruct;
  GPIO_InitTypeDef       GPIO_InitStructure;
  
  /* Enable clock for NCS port */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80015a6:	2101      	movs	r1, #1
 80015a8:	2008      	movs	r0, #8
 80015aa:	f7ff fbd1 	bl	8000d50 <RCC_AHB1PeriphClockCmd>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80015ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80015b4:	2302      	movs	r3, #2
 80015b6:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80015b8:	2301      	movs	r3, #1
 80015ba:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80015bc:	2300      	movs	r3, #0
 80015be:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	482d      	ldr	r0, [pc, #180]	; (8001680 <LCD_Init+0xe0>)
 80015ca:	f7fe ffbd 	bl	8000548 <GPIO_Init>
  
  /* Configure the LCD Control pins ------------------------------------------*/
  LCD_CtrlLinesConfig();
 80015ce:	f000 fbd5 	bl	8001d7c <LCD_CtrlLinesConfig>
  LCD_ChipSelect(DISABLE);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f8b2 	bl	800173c <LCD_ChipSelect>
  LCD_ChipSelect(ENABLE);
 80015d8:	2001      	movs	r0, #1
 80015da:	f000 f8af 	bl	800173c <LCD_ChipSelect>
  
  /* Configure the LCD_SPI interface -----------------------------------------*/
  LCD_SPIConfig(); 
 80015de:	f000 fc01 	bl	8001de4 <LCD_SPIConfig>
  
  /* Power on the LCD --------------------------------------------------------*/
  LCD_PowerOn();
 80015e2:	f000 fa83 	bl	8001aec <LCD_PowerOn>
  
  /* Enable the LTDC Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 80015e6:	2101      	movs	r1, #1
 80015e8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80015ec:	f7ff fbf0 	bl	8000dd0 <RCC_APB2PeriphClockCmd>
  
  /* Enable the DMA2D Clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE); 
 80015f0:	2101      	movs	r1, #1
 80015f2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015f6:	f7ff fbab 	bl	8000d50 <RCC_AHB1PeriphClockCmd>
  
  /* Configure the LCD Control pins */
  LCD_AF_GPIOConfig();  
 80015fa:	f000 fc57 	bl	8001eac <LCD_AF_GPIOConfig>
  
  /* Configure the FMC Parallel interface : SDRAM is used as Frame Buffer for LCD */
  SDRAM_Init();
 80015fe:	f000 fd26 	bl	800204e <SDRAM_Init>
  
  /* LTDC Configuration *********************************************************/  
  /* Polarity configuration */
  /* Initialize the horizontal synchronization polarity as active low */
  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;     
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  /* Initialize the vertical synchronization polarity as active low */  
  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;     
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  /* Initialize the data enable polarity as active low */
  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;     
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  /* Initialize the pixel clock polarity as input pixel clock */ 
  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  
  /* Configure R,G,B component values for LCD background color */                   
  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;            
 8001612:	2300      	movs	r3, #0
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;          
 8001616:	2300      	movs	r3, #0
 8001618:	643b      	str	r3, [r7, #64]	; 0x40
  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;  
 800161a:	2300      	movs	r3, #0
 800161c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Enable Pixel Clock */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 48/8 = 6 Mhz */
  RCC_PLLSAIConfig(192, 7, 4);
 800161e:	2204      	movs	r2, #4
 8001620:	2107      	movs	r1, #7
 8001622:	20c0      	movs	r0, #192	; 0xc0
 8001624:	f7ff faa4 	bl	8000b70 <RCC_PLLSAIConfig>
  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8001628:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800162c:	f7ff fb72 	bl	8000d14 <RCC_LTDCCLKDivConfig>
  
  /* Enable PLLSAI Clock */
  RCC_PLLSAICmd(ENABLE);
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fab7 	bl	8000ba4 <RCC_PLLSAICmd>
  /* Wait for PLLSAI activation */
  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8001636:	bf00      	nop
 8001638:	203d      	movs	r0, #61	; 0x3d
 800163a:	f7ff fc29 	bl	8000e90 <RCC_GetFlagStatus>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f9      	beq.n	8001638 <LCD_Init+0x98>
  {
  }
  
  /* Timing configuration */  
  /* Configure horizontal synchronization width */     
  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8001644:	2309      	movs	r3, #9
 8001646:	61fb      	str	r3, [r7, #28]
  /* Configure vertical synchronization height */
  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8001648:	2301      	movs	r3, #1
 800164a:	623b      	str	r3, [r7, #32]
  /* Configure accumulated horizontal back porch */
  LTDC_InitStruct.LTDC_AccumulatedHBP = 29; 
 800164c:	231d      	movs	r3, #29
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure accumulated vertical back porch */
  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;  
 8001650:	2303      	movs	r3, #3
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Configure accumulated active width */  
  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8001654:	f240 130d 	movw	r3, #269	; 0x10d
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure accumulated active height */
  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 800165a:	f240 1343 	movw	r3, #323	; 0x143
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  /* Configure total width */
  LTDC_InitStruct.LTDC_TotalWidth = 279; 
 8001660:	f240 1317 	movw	r3, #279	; 0x117
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
  /* Configure total height */
  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8001666:	f240 1347 	movw	r3, #327	; 0x147
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  LTDC_Init(&LTDC_InitStruct);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff f8e3 	bl	800083c <LTDC_Init>
}  
 8001676:	bf00      	nop
 8001678:	3748      	adds	r7, #72	; 0x48
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40020c00 	.word	0x40020c00

08001684 <LCD_LayerInit>:
  * @brief  Initializes the LCD Layers.
  * @param  None
  * @retval None
  */
void LCD_LayerInit(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b090      	sub	sp, #64	; 0x40
 8001688:	af00      	add	r7, sp, #0
  /* In this case all the active display area is used to display a picture then :
  Horizontal start = horizontal synchronization + Horizontal back porch = 30 
  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
  Vertical start   = vertical synchronization + vertical back porch     = 4
  Vertical stop   = Vertical start + window height -1  = 4 + 320 -1      */      
  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 800168a:	231e      	movs	r3, #30
 800168c:	603b      	str	r3, [r7, #0]
  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (LCD_PIXEL_WIDTH + 30 - 1); 
 800168e:	f240 130d 	movw	r3, #269	; 0x10d
 8001692:	607b      	str	r3, [r7, #4]
  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8001694:	2304      	movs	r3, #4
 8001696:	60bb      	str	r3, [r7, #8]
  LTDC_Layer_InitStruct.LTDC_VerticalStop = (LCD_PIXEL_HEIGHT + 4 - 1);
 8001698:	f240 1343 	movw	r3, #323	; 0x143
 800169c:	60fb      	str	r3, [r7, #12]
  
  /* Pixel Format configuration*/
  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 800169e:	2302      	movs	r3, #2
 80016a0:	613b      	str	r3, [r7, #16]
  /* Alpha constant (255 totally opaque) */
  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255; 
 80016a2:	23ff      	movs	r3, #255	; 0xff
 80016a4:	617b      	str	r3, [r7, #20]
  /* Default Color configuration (configure A,R,G,B component values) */          
  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;        
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;       
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;         
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_CA;    
 80016b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_CA;
 80016bc:	2305      	movs	r3, #5
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the length of one line of pixels in bytes + 3 then :
  Line Lenth = Active high width x number of bytes per pixel + 3 
  Active high width         = LCD_PIXEL_WIDTH 
  number of bytes per pixel = 2    (pixel_format : RGB565) 
  */
  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((LCD_PIXEL_WIDTH * 2) + 3);
 80016c0:	f240 13e3 	movw	r3, #483	; 0x1e3
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
  /* the pitch is the increment from the start of one line of pixels to the 
  start of the next line in bytes, then :
  Pitch = Active high width x number of bytes per pixel */ 
  LTDC_Layer_InitStruct.LTDC_CFBPitch = (LCD_PIXEL_WIDTH * 2);
 80016c6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Configure the number of lines */  
  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = LCD_PIXEL_HEIGHT;
 80016cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM */    
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER;
 80016d2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize LTDC layer 1 */
  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4813      	ldr	r0, [pc, #76]	; (800172c <LCD_LayerInit+0xa8>)
 80016de:	f7ff f991 	bl	8000a04 <LTDC_LayerInit>
  
  /* Configure Layer2 */
  /* Start Address configuration : the LCD Frame buffer is defined on SDRAM w/ Offset */     
  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <LCD_LayerInit+0xac>)
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Configure blending factors */       
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;    
 80016e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 80016ec:	2307      	movs	r3, #7
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Initialize LTDC layer 2 */
  LTDC_LayerInit(LTDC_Layer2, &LTDC_Layer_InitStruct);
 80016f0:	463b      	mov	r3, r7
 80016f2:	4619      	mov	r1, r3
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <LCD_LayerInit+0xb0>)
 80016f6:	f7ff f985 	bl	8000a04 <LTDC_LayerInit>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff f972 	bl	80009e4 <LTDC_ReloadConfig>
  
  /* Enable foreground & background Layers */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE); 
 8001700:	2101      	movs	r1, #1
 8001702:	480a      	ldr	r0, [pc, #40]	; (800172c <LCD_LayerInit+0xa8>)
 8001704:	f7ff fa18 	bl	8000b38 <LTDC_LayerCmd>
  LTDC_LayerCmd(LTDC_Layer2, ENABLE);
 8001708:	2101      	movs	r1, #1
 800170a:	480a      	ldr	r0, [pc, #40]	; (8001734 <LCD_LayerInit+0xb0>)
 800170c:	f7ff fa14 	bl	8000b38 <LTDC_LayerCmd>
  
  /* LTDC configuration reload */  
  LTDC_ReloadConfig(LTDC_IMReload);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff f967 	bl	80009e4 <LTDC_ReloadConfig>
  
  /* Set default font */    
  LCD_SetFont(&LCD_DEFAULT_FONT); 
 8001716:	4808      	ldr	r0, [pc, #32]	; (8001738 <LCD_LayerInit+0xb4>)
 8001718:	f000 f864 	bl	80017e4 <LCD_SetFont>
  
  /* dithering activation */
  LTDC_DitherCmd(ENABLE);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff f943 	bl	80009a8 <LTDC_DitherCmd>
}
 8001722:	bf00      	nop
 8001724:	3740      	adds	r7, #64	; 0x40
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40016884 	.word	0x40016884
 8001730:	d0050000 	.word	0xd0050000
 8001734:	40016904 	.word	0x40016904
 8001738:	20000010 	.word	0x20000010

0800173c <LCD_ChipSelect>:
  * @brief  Enable or Disable the LCD through CS pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d104      	bne.n	8001756 <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 800174c:	2104      	movs	r1, #4
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <LCD_ChipSelect+0x2c>)
 8001750:	f7fe ffb1 	bl	80006b6 <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
  }
}
 8001754:	e003      	b.n	800175e <LCD_ChipSelect+0x22>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 8001756:	2104      	movs	r1, #4
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <LCD_ChipSelect+0x2c>)
 800175a:	f7fe ff9d 	bl	8000698 <GPIO_SetBits>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40020800 	.word	0x40020800

0800176c <LCD_SetLayer>:
  * @brief  Sets the LCD Layer.
  * @param  Layerx: specifies the Layer foreground or background.
  * @retval None
  */
void LCD_SetLayer(__IO uint32_t Layerx)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if (Layerx == LCD_BACKGROUND_LAYER)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <LCD_SetLayer+0x1e>
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER; 
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <LCD_SetLayer+0x38>)
 800177c:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8001780:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_BACKGROUND_LAYER;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <LCD_SetLayer+0x3c>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
  else
  {
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
    CurrentLayer = LCD_FOREGROUND_LAYER;
  }
}  
 8001788:	e005      	b.n	8001796 <LCD_SetLayer+0x2a>
    CurrentFrameBuffer = LCD_FRAME_BUFFER + BUFFER_OFFSET;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <LCD_SetLayer+0x38>)
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <LCD_SetLayer+0x40>)
 800178e:	601a      	str	r2, [r3, #0]
    CurrentLayer = LCD_FOREGROUND_LAYER;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <LCD_SetLayer+0x3c>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
}  
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000020 	.word	0x20000020
 80017a8:	20000048 	.word	0x20000048
 80017ac:	d0050000 	.word	0xd0050000

080017b0 <LCD_SetColors>:
  * @param  TextColor: specifies the Text Color.
  * @param  BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(__IO uint16_t TextColor, __IO uint16_t BackColor)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	80fb      	strh	r3, [r7, #6]
 80017bc:	4613      	mov	r3, r2
 80017be:	80bb      	strh	r3, [r7, #4]
  CurrentTextColor = TextColor; 
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LCD_SetColors+0x2c>)
 80017c6:	801a      	strh	r2, [r3, #0]
  CurrentBackColor = BackColor;
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <LCD_SetColors+0x30>)
 80017ce:	801a      	strh	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000044 	.word	0x20000044
 80017e0:	2000001c 	.word	0x2000001c

080017e4 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <LCD_SetFont+0x1c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000040 	.word	0x20000040

08001804 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <LCD_GetFont+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000040 	.word	0x20000040

0800181c <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	e00a      	b.n	8001846 <LCD_Clear+0x2a>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	005a      	lsls	r2, r3, #1
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <LCD_Clear+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4413      	add	r3, r2
 800183a:	461a      	mov	r2, r3
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	8013      	strh	r3, [r2, #0]
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184c:	d3f0      	bcc.n	8001830 <LCD_Clear+0x14>
  } 
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000020 	.word	0x20000020

08001860 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	603a      	str	r2, [r7, #0]
 800186a:	80fb      	strh	r3, [r7, #6]
 800186c:	460b      	mov	r3, r1
 800186e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	4613      	mov	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	015b      	lsls	r3, r3, #5
 800188a:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 800188c:	88bb      	ldrh	r3, [r7, #4]
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4413      	add	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e05f      	b.n	800195a <LCD_DrawChar+0xfa>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e04a      	b.n	8001936 <LCD_DrawChar+0xd6>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	4619      	mov	r1, r3
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <LCD_DrawChar+0x114>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <LCD_DrawChar+0x118>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	2280      	movs	r2, #128	; 0x80
 80018c0:	409a      	lsls	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa42 f303 	asr.w	r3, r2, r3
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d104      	bne.n	80018d8 <LCD_DrawChar+0x78>
 80018ce:	4b29      	ldr	r3, [pc, #164]	; (8001974 <LCD_DrawChar+0x114>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	889b      	ldrh	r3, [r3, #4]
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d911      	bls.n	80018fc <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	fa42 f303 	asr.w	r3, r2, r3
 80018ea:	f003 0301 	and.w	r3, r3, #1
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d110      	bne.n	8001914 <LCD_DrawChar+0xb4>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <LCD_DrawChar+0x114>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	889b      	ldrh	r3, [r3, #4]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d90b      	bls.n	8001914 <LCD_DrawChar+0xb4>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	005a      	lsls	r2, r3, #1
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <LCD_DrawChar+0x11c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	441a      	add	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	4413      	add	r3, r2
 800190a:	461a      	mov	r2, r3
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <LCD_DrawChar+0x120>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	8013      	strh	r3, [r2, #0]
 8001912:	e00a      	b.n	800192a <LCD_DrawChar+0xca>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	005a      	lsls	r2, r3, #1
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <LCD_DrawChar+0x11c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	441a      	add	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	461a      	mov	r2, r3
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <LCD_DrawChar+0x124>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	8013      	strh	r3, [r2, #0]
      }
      Xaddress++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3301      	adds	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	3301      	adds	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <LCD_DrawChar+0x114>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	889b      	ldrh	r3, [r3, #4]
 800193c:	461a      	mov	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8ad      	bhi.n	80018a0 <LCD_DrawChar+0x40>
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <LCD_DrawChar+0x114>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	33f0      	adds	r3, #240	; 0xf0
 8001952:	60fb      	str	r3, [r7, #12]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3301      	adds	r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <LCD_DrawChar+0x114>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	88db      	ldrh	r3, [r3, #6]
 8001960:	461a      	mov	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	d898      	bhi.n	800189a <LCD_DrawChar+0x3a>
  }
}
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000040 	.word	0x20000040
 8001978:	aaaaaaab 	.word	0xaaaaaaab
 800197c:	20000020 	.word	0x20000020
 8001980:	2000001c 	.word	0x2000001c
 8001984:	20000044 	.word	0x20000044

08001988 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	460b      	mov	r3, r1
 8001994:	80bb      	strh	r3, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	3b20      	subs	r3, #32
 800199e:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <LCD_DisplayChar+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <LCD_DisplayChar+0x40>)
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	88c9      	ldrh	r1, [r1, #6]
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	441a      	add	r2, r3
 80019b6:	88b9      	ldrh	r1, [r7, #4]
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff50 	bl	8001860 <LCD_DrawChar>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000040 	.word	0x20000040

080019cc <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{  
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 80019dc:	e00f      	b.n	80019fe <LCD_DisplayStringLine+0x32>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	89f9      	ldrh	r1, [r7, #14]
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ffce 	bl	8001988 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <LCD_DisplayStringLine+0x74>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	889a      	ldrh	r2, [r3, #4]
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	4413      	add	r3, r2
 80019f6:	81fb      	strh	r3, [r7, #14]
    /* Point on the next character */
    ptr++;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	603b      	str	r3, [r7, #0]
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) & (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	2bef      	cmp	r3, #239	; 0xef
 8001a02:	d819      	bhi.n	8001a38 <LCD_DisplayStringLine+0x6c>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf14      	ite	ne
 8001a0c:	2301      	movne	r3, #1
 8001a0e:	2300      	moveq	r3, #0
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <LCD_DisplayStringLine+0x74>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	8899      	ldrh	r1, [r3, #4]
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <LCD_DisplayStringLine+0x74>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	4299      	cmp	r1, r3
 8001a28:	bfac      	ite	ge
 8001a2a:	2301      	movge	r3, #1
 8001a2c:	2300      	movlt	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4013      	ands	r3, r2
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1d2      	bne.n	80019de <LCD_DisplayStringLine+0x12>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000040 	.word	0x20000040

08001a44 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a54:	480e      	ldr	r0, [pc, #56]	; (8001a90 <LCD_WriteCommand+0x4c>)
 8001a56:	f000 f9b3 	bl	8001dc0 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fe6e 	bl	800173c <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	480b      	ldr	r0, [pc, #44]	; (8001a94 <LCD_WriteCommand+0x50>)
 8001a68:	f7ff fb1e 	bl	80010a8 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8001a6c:	bf00      	nop
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	4808      	ldr	r0, [pc, #32]	; (8001a94 <LCD_WriteCommand+0x50>)
 8001a72:	f7ff fb28 	bl	80010c6 <SPI_I2S_GetFlagStatus>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f8      	bne.n	8001a6e <LCD_WriteCommand+0x2a>
  delay(10);
 8001a7c:	200a      	movs	r0, #10
 8001a7e:	f000 fad1 	bl	8002024 <delay>
  LCD_ChipSelect(ENABLE);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff fe5a 	bl	800173c <LCD_ChipSelect>
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40015000 	.word	0x40015000

08001a98 <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa8:	480e      	ldr	r0, [pc, #56]	; (8001ae4 <LCD_WriteData+0x4c>)
 8001aaa:	f000 f989 	bl	8001dc0 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fe44 	bl	800173c <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <LCD_WriteData+0x50>)
 8001abc:	f7ff faf4 	bl	80010a8 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8001ac0:	bf00      	nop
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	4808      	ldr	r0, [pc, #32]	; (8001ae8 <LCD_WriteData+0x50>)
 8001ac6:	f7ff fafe 	bl	80010c6 <SPI_I2S_GetFlagStatus>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f8      	bne.n	8001ac2 <LCD_WriteData+0x2a>
  delay(10);
 8001ad0:	200a      	movs	r0, #10
 8001ad2:	f000 faa7 	bl	8002024 <delay>
  LCD_ChipSelect(ENABLE);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fe30 	bl	800173c <LCD_ChipSelect>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	40015000 	.word	0x40015000

08001aec <LCD_PowerOn>:

void LCD_PowerOn(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8001af0:	20ca      	movs	r0, #202	; 0xca
 8001af2:	f7ff ffa7 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 8001af6:	20c3      	movs	r0, #195	; 0xc3
 8001af8:	f7ff ffce 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x08);
 8001afc:	2008      	movs	r0, #8
 8001afe:	f7ff ffcb 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x50);
 8001b02:	2050      	movs	r0, #80	; 0x50
 8001b04:	f7ff ffc8 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 8001b08:	20cf      	movs	r0, #207	; 0xcf
 8001b0a:	f7ff ff9b 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff ffc2 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0xC1);
 8001b14:	20c1      	movs	r0, #193	; 0xc1
 8001b16:	f7ff ffbf 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x30);
 8001b1a:	2030      	movs	r0, #48	; 0x30
 8001b1c:	f7ff ffbc 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8001b20:	20ed      	movs	r0, #237	; 0xed
 8001b22:	f7ff ff8f 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 8001b26:	2064      	movs	r0, #100	; 0x64
 8001b28:	f7ff ffb6 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x03);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f7ff ffb3 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x12);
 8001b32:	2012      	movs	r0, #18
 8001b34:	f7ff ffb0 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x81);
 8001b38:	2081      	movs	r0, #129	; 0x81
 8001b3a:	f7ff ffad 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 8001b3e:	20e8      	movs	r0, #232	; 0xe8
 8001b40:	f7ff ff80 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 8001b44:	2085      	movs	r0, #133	; 0x85
 8001b46:	f7ff ffa7 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff ffa4 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x78);
 8001b50:	2078      	movs	r0, #120	; 0x78
 8001b52:	f7ff ffa1 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 8001b56:	20cb      	movs	r0, #203	; 0xcb
 8001b58:	f7ff ff74 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 8001b5c:	2039      	movs	r0, #57	; 0x39
 8001b5e:	f7ff ff9b 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x2C);
 8001b62:	202c      	movs	r0, #44	; 0x2c
 8001b64:	f7ff ff98 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff ff95 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x34);
 8001b6e:	2034      	movs	r0, #52	; 0x34
 8001b70:	f7ff ff92 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x02);
 8001b74:	2002      	movs	r0, #2
 8001b76:	f7ff ff8f 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 8001b7a:	20f7      	movs	r0, #247	; 0xf7
 8001b7c:	f7ff ff62 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 8001b80:	2020      	movs	r0, #32
 8001b82:	f7ff ff89 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 8001b86:	20ea      	movs	r0, #234	; 0xea
 8001b88:	f7ff ff5c 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff ff83 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff ff80 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 8001b98:	20b1      	movs	r0, #177	; 0xb1
 8001b9a:	f7ff ff53 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff ff7a 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8001ba4:	201b      	movs	r0, #27
 8001ba6:	f7ff ff77 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8001baa:	20b6      	movs	r0, #182	; 0xb6
 8001bac:	f7ff ff4a 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8001bb0:	200a      	movs	r0, #10
 8001bb2:	f7ff ff71 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0xA2);
 8001bb6:	20a2      	movs	r0, #162	; 0xa2
 8001bb8:	f7ff ff6e 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8001bbc:	20c0      	movs	r0, #192	; 0xc0
 8001bbe:	f7ff ff41 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8001bc2:	2010      	movs	r0, #16
 8001bc4:	f7ff ff68 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 8001bc8:	20c1      	movs	r0, #193	; 0xc1
 8001bca:	f7ff ff3b 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8001bce:	2010      	movs	r0, #16
 8001bd0:	f7ff ff62 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8001bd4:	20c5      	movs	r0, #197	; 0xc5
 8001bd6:	f7ff ff35 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 8001bda:	2045      	movs	r0, #69	; 0x45
 8001bdc:	f7ff ff5c 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x15);
 8001be0:	2015      	movs	r0, #21
 8001be2:	f7ff ff59 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 8001be6:	20c7      	movs	r0, #199	; 0xc7
 8001be8:	f7ff ff2c 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8001bec:	2090      	movs	r0, #144	; 0x90
 8001bee:	f7ff ff53 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8001bf2:	2036      	movs	r0, #54	; 0x36
 8001bf4:	f7ff ff26 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 8001bf8:	20c8      	movs	r0, #200	; 0xc8
 8001bfa:	f7ff ff4d 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8001bfe:	20f2      	movs	r0, #242	; 0xf2
 8001c00:	f7ff ff20 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff ff47 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 8001c0a:	20b0      	movs	r0, #176	; 0xb0
 8001c0c:	f7ff ff1a 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8001c10:	20c2      	movs	r0, #194	; 0xc2
 8001c12:	f7ff ff41 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 8001c16:	20b6      	movs	r0, #182	; 0xb6
 8001c18:	f7ff ff14 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8001c1c:	200a      	movs	r0, #10
 8001c1e:	f7ff ff3b 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0xA7);
 8001c22:	20a7      	movs	r0, #167	; 0xa7
 8001c24:	f7ff ff38 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x27);
 8001c28:	2027      	movs	r0, #39	; 0x27
 8001c2a:	f7ff ff35 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x04);
 8001c2e:	2004      	movs	r0, #4
 8001c30:	f7ff ff32 	bl	8001a98 <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 8001c34:	202a      	movs	r0, #42	; 0x2a
 8001c36:	f7ff ff05 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff ff2c 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff ff29 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff ff26 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0xEF);
 8001c4c:	20ef      	movs	r0, #239	; 0xef
 8001c4e:	f7ff ff23 	bl	8001a98 <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 8001c52:	202b      	movs	r0, #43	; 0x2b
 8001c54:	f7ff fef6 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff ff1d 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff ff1a 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x01);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff ff17 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x3F);
 8001c6a:	203f      	movs	r0, #63	; 0x3f
 8001c6c:	f7ff ff14 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 8001c70:	20f6      	movs	r0, #246	; 0xf6
 8001c72:	f7ff fee7 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff ff0e 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff ff0b 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x06);
 8001c82:	2006      	movs	r0, #6
 8001c84:	f7ff ff08 	bl	8001a98 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 8001c88:	202c      	movs	r0, #44	; 0x2c
 8001c8a:	f7ff fedb 	bl	8001a44 <LCD_WriteCommand>
  delay(200);
 8001c8e:	20c8      	movs	r0, #200	; 0xc8
 8001c90:	f000 f9c8 	bl	8002024 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8001c94:	2026      	movs	r0, #38	; 0x26
 8001c96:	f7ff fed5 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7ff fefc 	bl	8001a98 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8001ca0:	20e0      	movs	r0, #224	; 0xe0
 8001ca2:	f7ff fecf 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f7ff fef6 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x29);
 8001cac:	2029      	movs	r0, #41	; 0x29
 8001cae:	f7ff fef3 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x24);
 8001cb2:	2024      	movs	r0, #36	; 0x24
 8001cb4:	f7ff fef0 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8001cb8:	200c      	movs	r0, #12
 8001cba:	f7ff feed 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x0E);
 8001cbe:	200e      	movs	r0, #14
 8001cc0:	f7ff feea 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x09);
 8001cc4:	2009      	movs	r0, #9
 8001cc6:	f7ff fee7 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x4E);
 8001cca:	204e      	movs	r0, #78	; 0x4e
 8001ccc:	f7ff fee4 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x78);
 8001cd0:	2078      	movs	r0, #120	; 0x78
 8001cd2:	f7ff fee1 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x3C);
 8001cd6:	203c      	movs	r0, #60	; 0x3c
 8001cd8:	f7ff fede 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x09);
 8001cdc:	2009      	movs	r0, #9
 8001cde:	f7ff fedb 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x13);
 8001ce2:	2013      	movs	r0, #19
 8001ce4:	f7ff fed8 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x05);
 8001ce8:	2005      	movs	r0, #5
 8001cea:	f7ff fed5 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x17);
 8001cee:	2017      	movs	r0, #23
 8001cf0:	f7ff fed2 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x11);
 8001cf4:	2011      	movs	r0, #17
 8001cf6:	f7ff fecf 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x00);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fecc 	bl	8001a98 <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8001d00:	20e1      	movs	r0, #225	; 0xe1
 8001d02:	f7ff fe9f 	bl	8001a44 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff fec6 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x16);
 8001d0c:	2016      	movs	r0, #22
 8001d0e:	f7ff fec3 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x1B);
 8001d12:	201b      	movs	r0, #27
 8001d14:	f7ff fec0 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x04);
 8001d18:	2004      	movs	r0, #4
 8001d1a:	f7ff febd 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x11);
 8001d1e:	2011      	movs	r0, #17
 8001d20:	f7ff feba 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x07);
 8001d24:	2007      	movs	r0, #7
 8001d26:	f7ff feb7 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x31);
 8001d2a:	2031      	movs	r0, #49	; 0x31
 8001d2c:	f7ff feb4 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x33);
 8001d30:	2033      	movs	r0, #51	; 0x33
 8001d32:	f7ff feb1 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x42);
 8001d36:	2042      	movs	r0, #66	; 0x42
 8001d38:	f7ff feae 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x05);
 8001d3c:	2005      	movs	r0, #5
 8001d3e:	f7ff feab 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x0C);
 8001d42:	200c      	movs	r0, #12
 8001d44:	f7ff fea8 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x0A);
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f7ff fea5 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x28);
 8001d4e:	2028      	movs	r0, #40	; 0x28
 8001d50:	f7ff fea2 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x2F);
 8001d54:	202f      	movs	r0, #47	; 0x2f
 8001d56:	f7ff fe9f 	bl	8001a98 <LCD_WriteData>
  LCD_WriteData(0x0F);
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f7ff fe9c 	bl	8001a98 <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8001d60:	2011      	movs	r0, #17
 8001d62:	f7ff fe6f 	bl	8001a44 <LCD_WriteCommand>
  delay(200);
 8001d66:	20c8      	movs	r0, #200	; 0xc8
 8001d68:	f000 f95c 	bl	8002024 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8001d6c:	2029      	movs	r0, #41	; 0x29
 8001d6e:	f7ff fe69 	bl	8001a44 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8001d72:	202c      	movs	r0, #44	; 0x2c
 8001d74:	f7ff fe66 	bl	8001a44 <LCD_WriteCommand>
 }
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK, ENABLE);
 8001d82:	2101      	movs	r1, #1
 8001d84:	2004      	movs	r0, #4
 8001d86:	f7fe ffe3 	bl	8000d50 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001d92:	2301      	movs	r3, #1
 8001d94:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001d96:	2300      	movs	r3, #0
 8001d98:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <LCD_CtrlLinesConfig+0x40>)
 8001da4:	f7fe fbd0 	bl	8000548 <GPIO_Init>

  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2104      	movs	r1, #4
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <LCD_CtrlLinesConfig+0x40>)
 8001dae:	f000 f807 	bl	8001dc0 <LCD_CtrlLinesWrite>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40020800 	.word	0x40020800

08001dc0 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8001dd0:	787a      	ldrb	r2, [r7, #1]
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fc7c 	bl	80006d4 <GPIO_WriteBit>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8001dea:	2101      	movs	r1, #1
 8001dec:	2020      	movs	r0, #32
 8001dee:	f7fe ffaf 	bl	8000d50 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 8001df2:	2101      	movs	r1, #1
 8001df4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001df8:	f7fe ffea 	bl	8000dd0 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e00:	2302      	movs	r3, #2
 8001e02:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001e04:	2302      	movs	r3, #2
 8001e06:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4823      	ldr	r0, [pc, #140]	; (8001ea4 <LCD_SPIConfig+0xc0>)
 8001e16:	f7fe fb97 	bl	8000548 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8001e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1e:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	481f      	ldr	r0, [pc, #124]	; (8001ea4 <LCD_SPIConfig+0xc0>)
 8001e26:	f7fe fb8f 	bl	8000548 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8001e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e2e:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <LCD_SPIConfig+0xc0>)
 8001e36:	f7fe fb87 	bl	8000548 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8001e3a:	2205      	movs	r2, #5
 8001e3c:	2107      	movs	r1, #7
 8001e3e:	4819      	ldr	r0, [pc, #100]	; (8001ea4 <LCD_SPIConfig+0xc0>)
 8001e40:	f7fe fc60 	bl	8000704 <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8001e44:	2205      	movs	r2, #5
 8001e46:	2108      	movs	r1, #8
 8001e48:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <LCD_SPIConfig+0xc0>)
 8001e4a:	f7fe fc5b 	bl	8000704 <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8001e4e:	2205      	movs	r2, #5
 8001e50:	2109      	movs	r1, #9
 8001e52:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <LCD_SPIConfig+0xc0>)
 8001e54:	f7fe fc56 	bl	8000704 <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8001e58:	4813      	ldr	r0, [pc, #76]	; (8001ea8 <LCD_SPIConfig+0xc4>)
 8001e5a:	f7ff f853 	bl	8000f04 <SPI_I2S_DeInit>
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //SPI_Direction_1Line_Tx;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001e62:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e66:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001e70:	2300      	movs	r3, #0
 8001e72:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e78:	82fb      	strh	r3, [r7, #22]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; 
 8001e7a:	2308      	movs	r3, #8
 8001e7c:	833b      	strh	r3, [r7, #24]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	837b      	strh	r3, [r7, #26]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001e82:	2307      	movs	r3, #7
 8001e84:	83bb      	strh	r3, [r7, #28]
  SPI_Init(LCD_SPI, &SPI_InitStructure);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4806      	ldr	r0, [pc, #24]	; (8001ea8 <LCD_SPIConfig+0xc4>)
 8001e8e:	f7ff f8a7 	bl	8000fe0 <SPI_Init>

  /* SPI enable */
  SPI_Cmd(LCD_SPI, ENABLE);
 8001e92:	2101      	movs	r1, #1
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <LCD_SPIConfig+0xc4>)
 8001e96:	f7ff f8e7 	bl	8001068 <SPI_Cmd>
}
 8001e9a:	bf00      	nop
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40021400 	.word	0x40021400
 8001ea8:	40015000 	.word	0x40015000

08001eac <LCD_AF_GPIOConfig>:
  * @brief GPIO config for LTDC.
  * @retval
  *  None
  */
static void LCD_AF_GPIOConfig(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	206f      	movs	r0, #111	; 0x6f
 8001eb6:	f7fe ff4b 	bl	8000d50 <RCC_AHB1PeriphClockCmd>
           -----------------------------------------------------

*/

 /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8001eba:	220e      	movs	r2, #14
 8001ebc:	2103      	movs	r1, #3
 8001ebe:	4853      	ldr	r0, [pc, #332]	; (800200c <LCD_AF_GPIOConfig+0x160>)
 8001ec0:	f7fe fc20 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8001ec4:	220e      	movs	r2, #14
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4850      	ldr	r0, [pc, #320]	; (800200c <LCD_AF_GPIOConfig+0x160>)
 8001eca:	f7fe fc1b 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8001ece:	220e      	movs	r2, #14
 8001ed0:	2106      	movs	r1, #6
 8001ed2:	484e      	ldr	r0, [pc, #312]	; (800200c <LCD_AF_GPIOConfig+0x160>)
 8001ed4:	f7fe fc16 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8001ed8:	220e      	movs	r2, #14
 8001eda:	210b      	movs	r1, #11
 8001edc:	484b      	ldr	r0, [pc, #300]	; (800200c <LCD_AF_GPIOConfig+0x160>)
 8001ede:	f7fe fc11 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8001ee2:	220e      	movs	r2, #14
 8001ee4:	210c      	movs	r1, #12
 8001ee6:	4849      	ldr	r0, [pc, #292]	; (800200c <LCD_AF_GPIOConfig+0x160>)
 8001ee8:	f7fe fc0c 	bl	8000704 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8001eec:	f641 0358 	movw	r3, #6232	; 0x1858
 8001ef0:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
                             
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001efa:	2300      	movs	r3, #0
 8001efc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	463b      	mov	r3, r7
 8001f04:	4619      	mov	r1, r3
 8001f06:	4841      	ldr	r0, [pc, #260]	; (800200c <LCD_AF_GPIOConfig+0x160>)
 8001f08:	f7fe fb1e 	bl	8000548 <GPIO_Init>
  
 /* GPIOB configuration */  
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, 0x09);
 8001f0c:	2209      	movs	r2, #9
 8001f0e:	2100      	movs	r1, #0
 8001f10:	483f      	ldr	r0, [pc, #252]	; (8002010 <LCD_AF_GPIOConfig+0x164>)
 8001f12:	f7fe fbf7 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, 0x09);
 8001f16:	2209      	movs	r2, #9
 8001f18:	2101      	movs	r1, #1
 8001f1a:	483d      	ldr	r0, [pc, #244]	; (8002010 <LCD_AF_GPIOConfig+0x164>)
 8001f1c:	f7fe fbf2 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8001f20:	220e      	movs	r2, #14
 8001f22:	2108      	movs	r1, #8
 8001f24:	483a      	ldr	r0, [pc, #232]	; (8002010 <LCD_AF_GPIOConfig+0x164>)
 8001f26:	f7fe fbed 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8001f2a:	220e      	movs	r2, #14
 8001f2c:	2109      	movs	r1, #9
 8001f2e:	4838      	ldr	r0, [pc, #224]	; (8002010 <LCD_AF_GPIOConfig+0x164>)
 8001f30:	f7fe fbe8 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8001f34:	220e      	movs	r2, #14
 8001f36:	210a      	movs	r1, #10
 8001f38:	4835      	ldr	r0, [pc, #212]	; (8002010 <LCD_AF_GPIOConfig+0x164>)
 8001f3a:	f7fe fbe3 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8001f3e:	220e      	movs	r2, #14
 8001f40:	210b      	movs	r1, #11
 8001f42:	4833      	ldr	r0, [pc, #204]	; (8002010 <LCD_AF_GPIOConfig+0x164>)
 8001f44:	f7fe fbde 	bl	8000704 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8001f48:	f640 7303 	movw	r3, #3843	; 0xf03
 8001f4c:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
  
  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4619      	mov	r1, r3
 8001f52:	482f      	ldr	r0, [pc, #188]	; (8002010 <LCD_AF_GPIOConfig+0x164>)
 8001f54:	f7fe faf8 	bl	8000548 <GPIO_Init>

 /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8001f58:	220e      	movs	r2, #14
 8001f5a:	2106      	movs	r1, #6
 8001f5c:	482d      	ldr	r0, [pc, #180]	; (8002014 <LCD_AF_GPIOConfig+0x168>)
 8001f5e:	f7fe fbd1 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8001f62:	220e      	movs	r2, #14
 8001f64:	2107      	movs	r1, #7
 8001f66:	482b      	ldr	r0, [pc, #172]	; (8002014 <LCD_AF_GPIOConfig+0x168>)
 8001f68:	f7fe fbcc 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);
 8001f6c:	220e      	movs	r2, #14
 8001f6e:	210a      	movs	r1, #10
 8001f70:	4828      	ldr	r0, [pc, #160]	; (8002014 <LCD_AF_GPIOConfig+0x168>)
 8001f72:	f7fe fbc7 	bl	8000704 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10;
 8001f76:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001f7a:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4824      	ldr	r0, [pc, #144]	; (8002014 <LCD_AF_GPIOConfig+0x168>)
 8001f82:	f7fe fae1 	bl	8000548 <GPIO_Init>

 /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 8001f86:	220e      	movs	r2, #14
 8001f88:	2103      	movs	r1, #3
 8001f8a:	4823      	ldr	r0, [pc, #140]	; (8002018 <LCD_AF_GPIOConfig+0x16c>)
 8001f8c:	f7fe fbba 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8001f90:	220e      	movs	r2, #14
 8001f92:	2106      	movs	r1, #6
 8001f94:	4820      	ldr	r0, [pc, #128]	; (8002018 <LCD_AF_GPIOConfig+0x16c>)
 8001f96:	f7fe fbb5 	bl	8000704 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 8001f9a:	2348      	movs	r3, #72	; 0x48
 8001f9c:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	481d      	ldr	r0, [pc, #116]	; (8002018 <LCD_AF_GPIOConfig+0x16c>)
 8001fa4:	f7fe fad0 	bl	8000548 <GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 8001fa8:	220e      	movs	r2, #14
 8001faa:	210a      	movs	r1, #10
 8001fac:	481b      	ldr	r0, [pc, #108]	; (800201c <LCD_AF_GPIOConfig+0x170>)
 8001fae:	f7fe fba9 	bl	8000704 <GPIO_PinAFConfig>
  
  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8001fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb6:	603b      	str	r3, [r7, #0]
                             
  GPIO_Init(GPIOF, &GPIO_InitStruct);     
 8001fb8:	463b      	mov	r3, r7
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4817      	ldr	r0, [pc, #92]	; (800201c <LCD_AF_GPIOConfig+0x170>)
 8001fbe:	f7fe fac3 	bl	8000548 <GPIO_Init>

 /* GPIOG configuration */  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8001fc2:	220e      	movs	r2, #14
 8001fc4:	2106      	movs	r1, #6
 8001fc6:	4816      	ldr	r0, [pc, #88]	; (8002020 <LCD_AF_GPIOConfig+0x174>)
 8001fc8:	f7fe fb9c 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8001fcc:	220e      	movs	r2, #14
 8001fce:	2107      	movs	r1, #7
 8001fd0:	4813      	ldr	r0, [pc, #76]	; (8002020 <LCD_AF_GPIOConfig+0x174>)
 8001fd2:	f7fe fb97 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, 0x09);
 8001fd6:	2209      	movs	r2, #9
 8001fd8:	210a      	movs	r1, #10
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <LCD_AF_GPIOConfig+0x174>)
 8001fdc:	f7fe fb92 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8001fe0:	220e      	movs	r2, #14
 8001fe2:	210b      	movs	r1, #11
 8001fe4:	480e      	ldr	r0, [pc, #56]	; (8002020 <LCD_AF_GPIOConfig+0x174>)
 8001fe6:	f7fe fb8d 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, 0x09);
 8001fea:	2209      	movs	r2, #9
 8001fec:	210c      	movs	r1, #12
 8001fee:	480c      	ldr	r0, [pc, #48]	; (8002020 <LCD_AF_GPIOConfig+0x174>)
 8001ff0:	f7fe fb88 	bl	8000704 <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8001ff4:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 8001ff8:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  
  GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4808      	ldr	r0, [pc, #32]	; (8002020 <LCD_AF_GPIOConfig+0x174>)
 8002000:	f7fe faa2 	bl	8000548 <GPIO_Init>
 
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021400 	.word	0x40021400
 8002020:	40021800 	.word	0x40021800

08002024 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e002      	b.n	800203c <delay+0x18>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3b01      	subs	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f9      	bne.n	8002036 <delay+0x12>
  {
  }
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <SDRAM_Init>:
  *         on the SDRAM.
  * @param  None
  * @retval None
  */
void SDRAM_Init(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b092      	sub	sp, #72	; 0x48
 8002052:	af00      	add	r7, sp, #0
  FMC_SDRAMInitTypeDef  FMC_SDRAMInitStructure;
  FMC_SDRAMTimingInitTypeDef  FMC_SDRAMTimingInitStructure; 
  
  /* GPIO configuration for FMC SDRAM bank */
  SDRAM_GPIOConfig();
 8002054:	f000 f836 	bl	80020c4 <SDRAM_GPIOConfig>
  
  /* Enable FMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FMC, ENABLE);
 8002058:	2101      	movs	r1, #1
 800205a:	2001      	movs	r0, #1
 800205c:	f7fe fe98 	bl	8000d90 <RCC_AHB3PeriphClockCmd>
 
/* FMC Configuration ---------------------------------------------------------*/
/* FMC SDRAM Bank configuration */   
  /* Timing configuration for 84 Mhz of SD clock frequency (168Mhz/2) */
  /* TMRD: 2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_LoadToActiveDelay = 2;      
 8002060:	2302      	movs	r3, #2
 8002062:	603b      	str	r3, [r7, #0]
  /* TXSR: min=70ns (6x11.90ns) */
  FMC_SDRAMTimingInitStructure.FMC_ExitSelfRefreshDelay = 7;
 8002064:	2307      	movs	r3, #7
 8002066:	607b      	str	r3, [r7, #4]
  /* TRAS: min=42ns (4x11.90ns) max=120k (ns) */
  FMC_SDRAMTimingInitStructure.FMC_SelfRefreshTime = 4;
 8002068:	2304      	movs	r3, #4
 800206a:	60bb      	str	r3, [r7, #8]
  /* TRC:  min=63 (6x11.90ns) */        
  FMC_SDRAMTimingInitStructure.FMC_RowCycleDelay = 7;         
 800206c:	2307      	movs	r3, #7
 800206e:	60fb      	str	r3, [r7, #12]
  /* TWR:  2 Clock cycles */
  FMC_SDRAMTimingInitStructure.FMC_WriteRecoveryTime = 2;      
 8002070:	2302      	movs	r3, #2
 8002072:	613b      	str	r3, [r7, #16]
  /* TRP:  15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RPDelay = 2;                
 8002074:	2302      	movs	r3, #2
 8002076:	617b      	str	r3, [r7, #20]
  /* TRCD: 15ns => 2x11.90ns */
  FMC_SDRAMTimingInitStructure.FMC_RCDDelay = 2;
 8002078:	2302      	movs	r3, #2
 800207a:	61bb      	str	r3, [r7, #24]

/* FMC SDRAM control configuration */
  FMC_SDRAMInitStructure.FMC_Bank = FMC_Bank2_SDRAM;
 800207c:	2301      	movs	r3, #1
 800207e:	61fb      	str	r3, [r7, #28]
  /* Row addressing: [7:0] */
  FMC_SDRAMInitStructure.FMC_ColumnBitsNumber = FMC_ColumnBits_Number_8b;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  /* Column addressing: [11:0] */
  FMC_SDRAMInitStructure.FMC_RowBitsNumber = FMC_RowBits_Number_12b;
 8002084:	2304      	movs	r3, #4
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  FMC_SDRAMInitStructure.FMC_SDMemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8002088:	2310      	movs	r3, #16
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  FMC_SDRAMInitStructure.FMC_InternalBankNumber = FMC_InternalBank_Number_4;
 800208c:	2340      	movs	r3, #64	; 0x40
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  FMC_SDRAMInitStructure.FMC_CASLatency = SDRAM_CAS_LATENCY; 
 8002090:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
  FMC_SDRAMInitStructure.FMC_WriteProtection = FMC_Write_Protection_Disable;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
  FMC_SDRAMInitStructure.FMC_SDClockPeriod = SDCLOCK_PERIOD;  
 800209a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38
  FMC_SDRAMInitStructure.FMC_ReadBurst = SDRAM_READBURST;
 80020a0:	2300      	movs	r3, #0
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FMC_SDRAMInitStructure.FMC_ReadPipeDelay = FMC_ReadPipe_Delay_1;
 80020a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a8:	643b      	str	r3, [r7, #64]	; 0x40
  FMC_SDRAMInitStructure.FMC_SDRAMTimingStruct = &FMC_SDRAMTimingInitStructure;
 80020aa:	463b      	mov	r3, r7
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
  
  /* FMC SDRAM bank initialization */
  FMC_SDRAMInit(&FMC_SDRAMInitStructure); 
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f928 	bl	8000308 <FMC_SDRAMInit>
  
  /* FMC SDRAM device initialization sequence */
  SDRAM_InitSequence(); 
 80020b8:	f000 f910 	bl	80022dc <SDRAM_InitSequence>
  
}
 80020bc:	bf00      	nop
 80020be:	3748      	adds	r7, #72	; 0x48
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <SDRAM_GPIOConfig>:
  * @brief  Configures all SDRAM memory I/Os pins. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_GPIOConfig(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD |
 80020ca:	2101      	movs	r1, #1
 80020cc:	207e      	movs	r0, #126	; 0x7e
 80020ce:	f7fe fe3f 	bl	8000d50 <RCC_AHB1PeriphClockCmd>
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
 80020d2:	2302      	movs	r3, #2
 80020d4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80020d6:	2302      	movs	r3, #2
 80020d8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80020da:	2300      	movs	r3, #0
 80020dc:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	71fb      	strb	r3, [r7, #7]

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource5 , GPIO_AF_FMC);
 80020e2:	220c      	movs	r2, #12
 80020e4:	2105      	movs	r1, #5
 80020e6:	4877      	ldr	r0, [pc, #476]	; (80022c4 <SDRAM_GPIOConfig+0x200>)
 80020e8:	f7fe fb0c 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6 , GPIO_AF_FMC);
 80020ec:	220c      	movs	r2, #12
 80020ee:	2106      	movs	r1, #6
 80020f0:	4874      	ldr	r0, [pc, #464]	; (80022c4 <SDRAM_GPIOConfig+0x200>)
 80020f2:	f7fe fb07 	bl	8000704 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5  | GPIO_Pin_6;      
 80020f6:	2360      	movs	r3, #96	; 0x60
 80020f8:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80020fa:	463b      	mov	r3, r7
 80020fc:	4619      	mov	r1, r3
 80020fe:	4871      	ldr	r0, [pc, #452]	; (80022c4 <SDRAM_GPIOConfig+0x200>)
 8002100:	f7fe fa22 	bl	8000548 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource0 , GPIO_AF_FMC);
 8002104:	220c      	movs	r2, #12
 8002106:	2100      	movs	r1, #0
 8002108:	486f      	ldr	r0, [pc, #444]	; (80022c8 <SDRAM_GPIOConfig+0x204>)
 800210a:	f7fe fafb 	bl	8000704 <GPIO_PinAFConfig>
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;      
 800210e:	2301      	movs	r3, #1
 8002110:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002112:	463b      	mov	r3, r7
 8002114:	4619      	mov	r1, r3
 8002116:	486c      	ldr	r0, [pc, #432]	; (80022c8 <SDRAM_GPIOConfig+0x204>)
 8002118:	f7fe fa16 	bl	8000548 <GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FMC);
 800211c:	220c      	movs	r2, #12
 800211e:	2100      	movs	r1, #0
 8002120:	486a      	ldr	r0, [pc, #424]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 8002122:	f7fe faef 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FMC);
 8002126:	220c      	movs	r2, #12
 8002128:	2101      	movs	r1, #1
 800212a:	4868      	ldr	r0, [pc, #416]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 800212c:	f7fe faea 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FMC);
 8002130:	220c      	movs	r2, #12
 8002132:	2108      	movs	r1, #8
 8002134:	4865      	ldr	r0, [pc, #404]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 8002136:	f7fe fae5 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FMC);
 800213a:	220c      	movs	r2, #12
 800213c:	2109      	movs	r1, #9
 800213e:	4863      	ldr	r0, [pc, #396]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 8002140:	f7fe fae0 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FMC);
 8002144:	220c      	movs	r2, #12
 8002146:	210a      	movs	r1, #10
 8002148:	4860      	ldr	r0, [pc, #384]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 800214a:	f7fe fadb 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FMC);
 800214e:	220c      	movs	r2, #12
 8002150:	210e      	movs	r1, #14
 8002152:	485e      	ldr	r0, [pc, #376]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 8002154:	f7fe fad6 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FMC);
 8002158:	220c      	movs	r2, #12
 800215a:	210f      	movs	r1, #15
 800215c:	485b      	ldr	r0, [pc, #364]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 800215e:	f7fe fad1 	bl	8000704 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1  | GPIO_Pin_8 |
 8002162:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002166:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
                                GPIO_Pin_15;

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	4857      	ldr	r0, [pc, #348]	; (80022cc <SDRAM_GPIOConfig+0x208>)
 800216e:	f7fe f9eb 	bl	8000548 <GPIO_Init>

  /* GPIOE configuration */
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FMC);
 8002172:	220c      	movs	r2, #12
 8002174:	2100      	movs	r1, #0
 8002176:	4856      	ldr	r0, [pc, #344]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 8002178:	f7fe fac4 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FMC);
 800217c:	220c      	movs	r2, #12
 800217e:	2101      	movs	r1, #1
 8002180:	4853      	ldr	r0, [pc, #332]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 8002182:	f7fe fabf 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FMC);
 8002186:	220c      	movs	r2, #12
 8002188:	2107      	movs	r1, #7
 800218a:	4851      	ldr	r0, [pc, #324]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 800218c:	f7fe faba 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FMC);
 8002190:	220c      	movs	r2, #12
 8002192:	2108      	movs	r1, #8
 8002194:	484e      	ldr	r0, [pc, #312]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 8002196:	f7fe fab5 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FMC);
 800219a:	220c      	movs	r2, #12
 800219c:	2109      	movs	r1, #9
 800219e:	484c      	ldr	r0, [pc, #304]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021a0:	f7fe fab0 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FMC);
 80021a4:	220c      	movs	r2, #12
 80021a6:	210a      	movs	r1, #10
 80021a8:	4849      	ldr	r0, [pc, #292]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021aa:	f7fe faab 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FMC);
 80021ae:	220c      	movs	r2, #12
 80021b0:	210b      	movs	r1, #11
 80021b2:	4847      	ldr	r0, [pc, #284]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021b4:	f7fe faa6 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FMC);
 80021b8:	220c      	movs	r2, #12
 80021ba:	210c      	movs	r1, #12
 80021bc:	4844      	ldr	r0, [pc, #272]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021be:	f7fe faa1 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FMC);
 80021c2:	220c      	movs	r2, #12
 80021c4:	210d      	movs	r1, #13
 80021c6:	4842      	ldr	r0, [pc, #264]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021c8:	f7fe fa9c 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FMC);
 80021cc:	220c      	movs	r2, #12
 80021ce:	210e      	movs	r1, #14
 80021d0:	483f      	ldr	r0, [pc, #252]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021d2:	f7fe fa97 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FMC);
 80021d6:	220c      	movs	r2, #12
 80021d8:	210f      	movs	r1, #15
 80021da:	483d      	ldr	r0, [pc, #244]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021dc:	f7fe fa92 	bl	8000704 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1  | GPIO_Pin_7 |
 80021e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021e4:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_8  | GPIO_Pin_9  | GPIO_Pin_10 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4839      	ldr	r0, [pc, #228]	; (80022d0 <SDRAM_GPIOConfig+0x20c>)
 80021ec:	f7fe f9ac 	bl	8000548 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FMC);
 80021f0:	220c      	movs	r2, #12
 80021f2:	2100      	movs	r1, #0
 80021f4:	4837      	ldr	r0, [pc, #220]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 80021f6:	f7fe fa85 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FMC);
 80021fa:	220c      	movs	r2, #12
 80021fc:	2101      	movs	r1, #1
 80021fe:	4835      	ldr	r0, [pc, #212]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 8002200:	f7fe fa80 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FMC);
 8002204:	220c      	movs	r2, #12
 8002206:	2102      	movs	r1, #2
 8002208:	4832      	ldr	r0, [pc, #200]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 800220a:	f7fe fa7b 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FMC);
 800220e:	220c      	movs	r2, #12
 8002210:	2103      	movs	r1, #3
 8002212:	4830      	ldr	r0, [pc, #192]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 8002214:	f7fe fa76 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FMC);
 8002218:	220c      	movs	r2, #12
 800221a:	2104      	movs	r1, #4
 800221c:	482d      	ldr	r0, [pc, #180]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 800221e:	f7fe fa71 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FMC);
 8002222:	220c      	movs	r2, #12
 8002224:	2105      	movs	r1, #5
 8002226:	482b      	ldr	r0, [pc, #172]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 8002228:	f7fe fa6c 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource11 , GPIO_AF_FMC);
 800222c:	220c      	movs	r2, #12
 800222e:	210b      	movs	r1, #11
 8002230:	4828      	ldr	r0, [pc, #160]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 8002232:	f7fe fa67 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FMC);
 8002236:	220c      	movs	r2, #12
 8002238:	210c      	movs	r1, #12
 800223a:	4826      	ldr	r0, [pc, #152]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 800223c:	f7fe fa62 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FMC);
 8002240:	220c      	movs	r2, #12
 8002242:	210d      	movs	r1, #13
 8002244:	4823      	ldr	r0, [pc, #140]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 8002246:	f7fe fa5d 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FMC);
 800224a:	220c      	movs	r2, #12
 800224c:	210e      	movs	r1, #14
 800224e:	4821      	ldr	r0, [pc, #132]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 8002250:	f7fe fa58 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FMC);
 8002254:	220c      	movs	r2, #12
 8002256:	210f      	movs	r1, #15
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 800225a:	f7fe fa53 	bl	8000704 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0  | GPIO_Pin_1 | GPIO_Pin_2 | 
 800225e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002262:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_3  | GPIO_Pin_4 | GPIO_Pin_5 |
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
                                GPIO_Pin_14 | GPIO_Pin_15;      

  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002264:	463b      	mov	r3, r7
 8002266:	4619      	mov	r1, r3
 8002268:	481a      	ldr	r0, [pc, #104]	; (80022d4 <SDRAM_GPIOConfig+0x210>)
 800226a:	f7fe f96d 	bl	8000548 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FMC);
 800226e:	220c      	movs	r2, #12
 8002270:	2100      	movs	r1, #0
 8002272:	4819      	ldr	r0, [pc, #100]	; (80022d8 <SDRAM_GPIOConfig+0x214>)
 8002274:	f7fe fa46 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FMC);
 8002278:	220c      	movs	r2, #12
 800227a:	2101      	movs	r1, #1
 800227c:	4816      	ldr	r0, [pc, #88]	; (80022d8 <SDRAM_GPIOConfig+0x214>)
 800227e:	f7fe fa41 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FMC);
 8002282:	220c      	movs	r2, #12
 8002284:	2104      	movs	r1, #4
 8002286:	4814      	ldr	r0, [pc, #80]	; (80022d8 <SDRAM_GPIOConfig+0x214>)
 8002288:	f7fe fa3c 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FMC);
 800228c:	220c      	movs	r2, #12
 800228e:	2105      	movs	r1, #5
 8002290:	4811      	ldr	r0, [pc, #68]	; (80022d8 <SDRAM_GPIOConfig+0x214>)
 8002292:	f7fe fa37 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource8 , GPIO_AF_FMC);
 8002296:	220c      	movs	r2, #12
 8002298:	2108      	movs	r1, #8
 800229a:	480f      	ldr	r0, [pc, #60]	; (80022d8 <SDRAM_GPIOConfig+0x214>)
 800229c:	f7fe fa32 	bl	8000704 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource15 , GPIO_AF_FMC);
 80022a0:	220c      	movs	r2, #12
 80022a2:	210f      	movs	r1, #15
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <SDRAM_GPIOConfig+0x214>)
 80022a6:	f7fe fa2d 	bl	8000704 <GPIO_PinAFConfig>
  

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 |
 80022aa:	f248 1333 	movw	r3, #33075	; 0x8133
 80022ae:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_15;

  GPIO_Init(GPIOG, &GPIO_InitStructure);    
 80022b0:	463b      	mov	r3, r7
 80022b2:	4619      	mov	r1, r3
 80022b4:	4808      	ldr	r0, [pc, #32]	; (80022d8 <SDRAM_GPIOConfig+0x214>)
 80022b6:	f7fe f947 	bl	8000548 <GPIO_Init>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40020400 	.word	0x40020400
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020c00 	.word	0x40020c00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40021800 	.word	0x40021800

080022dc <SDRAM_InitSequence>:
  * @brief  Executes the SDRAM memory initialization sequence. 
  * @param  None. 
  * @retval None.
  */
void SDRAM_InitSequence(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
  FMC_SDRAMCommandTypeDef FMC_SDRAMCommandStructure;
  uint32_t tmpr = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  
/* Step 3 --------------------------------------------------------------------*/
  /* Configure a clock configuration enable command */
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_CLK_Enabled;
 80022e6:	2301      	movs	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 80022ea:	2308      	movs	r3, #8
 80022ec:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 80022ee:	2301      	movs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80022f6:	bf00      	nop
 80022f8:	2120      	movs	r1, #32
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7fe f8e6 	bl	80004cc <FMC_GetFlagStatus>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f8      	bne.n	80022f8 <SDRAM_InitSequence+0x1c>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);  
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f8ab 	bl	8000464 <FMC_SDRAMCmdConfig>
  
/* Step 4 --------------------------------------------------------------------*/
  /* Insert 100 ms delay */
  __Delay(10);
 800230e:	200a      	movs	r0, #10
 8002310:	f000 f85c 	bl	80023cc <delay>
    
/* Step 5 --------------------------------------------------------------------*/
  /* Configure a PALL (precharge all) command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_PALL;
 8002314:	2302      	movs	r3, #2
 8002316:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002318:	2308      	movs	r3, #8
 800231a:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 800231c:	2301      	movs	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002324:	bf00      	nop
 8002326:	2120      	movs	r1, #32
 8002328:	2001      	movs	r0, #1
 800232a:	f7fe f8cf 	bl	80004cc <FMC_GetFlagStatus>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f8      	bne.n	8002326 <SDRAM_InitSequence+0x4a>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f894 	bl	8000464 <FMC_SDRAMCmdConfig>
  
/* Step 6 --------------------------------------------------------------------*/
  /* Configure a Auto-Refresh command */ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_AutoRefresh;
 800233c:	2303      	movs	r3, #3
 800233e:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002340:	2308      	movs	r3, #8
 8002342:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 4;
 8002344:	2304      	movs	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 800234c:	bf00      	nop
 800234e:	2120      	movs	r1, #32
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe f8bb 	bl	80004cc <FMC_GetFlagStatus>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f8      	bne.n	800234e <SDRAM_InitSequence+0x72>
  {
  }
  /* Send the  first command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f880 	bl	8000464 <FMC_SDRAMCmdConfig>
  
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002364:	bf00      	nop
 8002366:	2120      	movs	r1, #32
 8002368:	2001      	movs	r0, #1
 800236a:	f7fe f8af 	bl	80004cc <FMC_GetFlagStatus>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f8      	bne.n	8002366 <SDRAM_InitSequence+0x8a>
  {
  }
  /* Send the second command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f874 	bl	8000464 <FMC_SDRAMCmdConfig>
  
/* Step 7 --------------------------------------------------------------------*/
  /* Program the external memory mode register */
  tmpr = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 800237c:	f240 2331 	movw	r3, #561	; 0x231
 8002380:	617b      	str	r3, [r7, #20]
                   SDRAM_MODEREG_CAS_LATENCY_3           |
                   SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                   SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  /* Configure a load Mode register command*/ 
  FMC_SDRAMCommandStructure.FMC_CommandMode = FMC_Command_Mode_LoadMode;
 8002382:	2304      	movs	r3, #4
 8002384:	607b      	str	r3, [r7, #4]
  FMC_SDRAMCommandStructure.FMC_CommandTarget = FMC_Command_Target_bank2;
 8002386:	2308      	movs	r3, #8
 8002388:	60bb      	str	r3, [r7, #8]
  FMC_SDRAMCommandStructure.FMC_AutoRefreshNumber = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
  FMC_SDRAMCommandStructure.FMC_ModeRegisterDefinition = tmpr;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	613b      	str	r3, [r7, #16]
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 8002392:	bf00      	nop
 8002394:	2120      	movs	r1, #32
 8002396:	2001      	movs	r0, #1
 8002398:	f7fe f898 	bl	80004cc <FMC_GetFlagStatus>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f8      	bne.n	8002394 <SDRAM_InitSequence+0xb8>
  {
  }
  /* Send the command */
  FMC_SDRAMCmdConfig(&FMC_SDRAMCommandStructure);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f85d 	bl	8000464 <FMC_SDRAMCmdConfig>
/* Step 8 --------------------------------------------------------------------*/

  /* Set the refresh rate counter */
  /* (7.81 us x Freq) - 20 */
  /* Set the device refresh counter */
  FMC_SetRefreshCount(683);
 80023aa:	f240 20ab 	movw	r0, #683	; 0x2ab
 80023ae:	f7fe f879 	bl	80004a4 <FMC_SetRefreshCount>
  /* Wait until the SDRAM controller is ready */ 
  while(FMC_GetFlagStatus(FMC_Bank2_SDRAM, FMC_FLAG_Busy) != RESET)
 80023b2:	bf00      	nop
 80023b4:	2120      	movs	r1, #32
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7fe f888 	bl	80004cc <FMC_GetFlagStatus>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f8      	bne.n	80023b4 <SDRAM_InitSequence+0xd8>
  {
  }
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  for(index = (100000 * nCount); index != 0; index--)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a08      	ldr	r2, [pc, #32]	; (80023fc <delay+0x30>)
 80023dc:	fb02 f303 	mul.w	r3, r2, r3
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e002      	b.n	80023ea <delay+0x1e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f9      	bne.n	80023e4 <delay+0x18>
  {
  }
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	000186a0 	.word	0x000186a0

08002400 <main>:
**  Abstract: initializes uart, receives data and shows it on LCD
**
**===========================================================================
*/
int main(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b0b2      	sub	sp, #200	; 0xc8
 8002404:	af00      	add	r7, sp, #0

	/* LCD initiatization */
	LCD_Init();
 8002406:	f7ff f8cb 	bl	80015a0 <LCD_Init>
	/* LCD Layer initiatization */
	LCD_LayerInit();
 800240a:	f7ff f93b 	bl	8001684 <LCD_LayerInit>
	/* Enable the LTDC */
	LTDC_Cmd(ENABLE);
 800240e:	2001      	movs	r0, #1
 8002410:	f7fe faac 	bl	800096c <LTDC_Cmd>
	/* Set LCD foreground layer */
	LCD_SetLayer(LCD_FOREGROUND_LAYER);
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff f9a9 	bl	800176c <LCD_SetLayer>
	/* Clear the LCD */
	LCD_Clear(LCD_COLOR_BLACK);
 800241a:	2000      	movs	r0, #0
 800241c:	f7ff f9fe 	bl	800181c <LCD_Clear>
	LCD_SetFont(&Font16x24);
 8002420:	4862      	ldr	r0, [pc, #392]	; (80025ac <main+0x1ac>)
 8002422:	f7ff f9df 	bl	80017e4 <LCD_SetFont>
	LCD_SetColors(LCD_COLOR_GREEN,LCD_COLOR_BLACK);
 8002426:	2100      	movs	r1, #0
 8002428:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800242c:	f7ff f9c0 	bl	80017b0 <LCD_SetColors>

	/* Init GPIO Ports [PA9=TX, PA10=RX] for UART1 */
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_StructInit(&GPIO_InitStruct);
 8002430:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f915 	bl	8000664 <GPIO_StructInit>
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 800243a:	2300      	movs	r3, #0
 800243c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8002446:	2302      	movs	r3, #2
 8002448:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 800244c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002458:	4619      	mov	r1, r3
 800245a:	4855      	ldr	r0, [pc, #340]	; (80025b0 <main+0x1b0>)
 800245c:	f7fe f874 	bl	8000548 <GPIO_Init>

	// Set USART1 Peripherial Clock Ressource
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002460:	2101      	movs	r1, #1
 8002462:	2010      	movs	r0, #16
 8002464:	f7fe fcb4 	bl	8000dd0 <RCC_APB2PeriphClockCmd>

	/* Init UART1 */
	USART_DeInit(USART1);
 8002468:	4852      	ldr	r0, [pc, #328]	; (80025b4 <main+0x1b4>)
 800246a:	f7fe fe49 	bl	8001100 <USART_DeInit>
	// Init USART Clock
	USART_ClockInitTypeDef USART1_ClockInit;
	USART_ClockStructInit(&USART1_ClockInit);
 800246e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe ffd2 	bl	800141c <USART_ClockStructInit>
	USART_ClockInit(USART1, &USART1_ClockInit);
 8002478:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800247c:	4619      	mov	r1, r3
 800247e:	484d      	ldr	r0, [pc, #308]	; (80025b4 <main+0x1b4>)
 8002480:	f7fe ffa1 	bl	80013c6 <USART_ClockInit>
	// Delete all content on the input buffer
	int deadloopprev;
	while ((USART_GetFlagStatus(USART1, USART_FLAG_RXNE ) == SET) &&
 8002484:	e007      	b.n	8002496 <main+0x96>
		 (deadloopprev < 10000))
	{
	  USART_ReceiveData(USART1);
 8002486:	484b      	ldr	r0, [pc, #300]	; (80025b4 <main+0x1b4>)
 8002488:	f7fe fffe 	bl	8001488 <USART_ReceiveData>
	  deadloopprev++;
 800248c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002490:	3301      	adds	r3, #1
 8002492:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	while ((USART_GetFlagStatus(USART1, USART_FLAG_RXNE ) == SET) &&
 8002496:	2120      	movs	r1, #32
 8002498:	4846      	ldr	r0, [pc, #280]	; (80025b4 <main+0x1b4>)
 800249a:	f7ff f805 	bl	80014a8 <USART_GetFlagStatus>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d105      	bne.n	80024b0 <main+0xb0>
 80024a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80024ac:	4293      	cmp	r3, r2
 80024ae:	ddea      	ble.n	8002486 <main+0x86>
	}
	USART_Cmd(USART1, DISABLE);
 80024b0:	2100      	movs	r1, #0
 80024b2:	4840      	ldr	r0, [pc, #256]	; (80025b4 <main+0x1b4>)
 80024b4:	f7fe ffc8 	bl	8001448 <USART_Cmd>
	USART_InitTypeDef USART1_Init;
	USART_StructInit(&USART1_Init);
 80024b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe ff65 	bl	800138c <USART_StructInit>
	USART_Init(USART1, &USART1_Init);
 80024c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024c6:	4619      	mov	r1, r3
 80024c8:	483a      	ldr	r0, [pc, #232]	; (80025b4 <main+0x1b4>)
 80024ca:	f7fe fea5 	bl	8001218 <USART_Init>
	USART_Cmd(USART1, ENABLE);
 80024ce:	2101      	movs	r1, #1
 80024d0:	4838      	ldr	r0, [pc, #224]	; (80025b4 <main+0x1b4>)
 80024d2:	f7fe ffb9 	bl	8001448 <USART_Cmd>

	// init USART Values
	char pc[144];
	for( int i = 0; i < 144; i++) pc[i]=0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024dc:	e00a      	b.n	80024f4 <main+0xf4>
 80024de:	1d3a      	adds	r2, r7, #4
 80024e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e4:	4413      	add	r3, r2
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ee:	3301      	adds	r3, #1
 80024f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024f8:	2b8f      	cmp	r3, #143	; 0x8f
 80024fa:	ddf0      	ble.n	80024de <main+0xde>
	uint8_t count = 143;
 80024fc:	238f      	movs	r3, #143	; 0x8f
 80024fe:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	/* Infinite loop */
	while (1)
	{
		int deadloopprev;
		while ((USART_GetFlagStatus(USART1, USART_FLAG_RXNE ) == RESET) &&
 8002502:	e004      	b.n	800250e <main+0x10e>
			 (deadloopprev < 10000))
		{
		  deadloopprev++;
 8002504:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002508:	3301      	adds	r3, #1
 800250a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		while ((USART_GetFlagStatus(USART1, USART_FLAG_RXNE ) == RESET) &&
 800250e:	2120      	movs	r1, #32
 8002510:	4828      	ldr	r0, [pc, #160]	; (80025b4 <main+0x1b4>)
 8002512:	f7fe ffc9 	bl	80014a8 <USART_GetFlagStatus>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <main+0x128>
 800251c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002520:	f242 720f 	movw	r2, #9999	; 0x270f
 8002524:	4293      	cmp	r3, r2
 8002526:	dded      	ble.n	8002504 <main+0x104>
		}
		deadloopprev = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		while ((USART_GetFlagStatus(USART1, USART_FLAG_RXNE ) == SET) &&
 800252e:	e026      	b.n	800257e <main+0x17e>
			 (deadloopprev < 10000))
		{
		  for (int i = 0; i<=count; i++ )
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002536:	e017      	b.n	8002568 <main+0x168>
		  {
			  uint16_t data_received;
			  data_received = USART_ReceiveData(USART1);
 8002538:	481e      	ldr	r0, [pc, #120]	; (80025b4 <main+0x1b4>)
 800253a:	f7fe ffa5 	bl	8001488 <USART_ReceiveData>
 800253e:	4603      	mov	r3, r0
 8002540:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
			  if (data_received <= 0xFF)
 8002544:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002548:	2bff      	cmp	r3, #255	; 0xff
 800254a:	d808      	bhi.n	800255e <main+0x15e>
			  {
				  pc[i] = data_received;
 800254c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002550:	b2d9      	uxtb	r1, r3
 8002552:	1d3a      	adds	r2, r7, #4
 8002554:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002558:	4413      	add	r3, r2
 800255a:	460a      	mov	r2, r1
 800255c:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i<=count; i++ )
 800255e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002562:	3301      	adds	r3, #1
 8002564:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002568:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800256c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002570:	429a      	cmp	r2, r3
 8002572:	dae1      	bge.n	8002538 <main+0x138>
			  }
		  }
		  deadloopprev++;
 8002574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002578:	3301      	adds	r3, #1
 800257a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		while ((USART_GetFlagStatus(USART1, USART_FLAG_RXNE ) == SET) &&
 800257e:	2120      	movs	r1, #32
 8002580:	480c      	ldr	r0, [pc, #48]	; (80025b4 <main+0x1b4>)
 8002582:	f7fe ff91 	bl	80014a8 <USART_GetFlagStatus>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <main+0x198>
 800258c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002590:	f242 720f 	movw	r2, #9999	; 0x270f
 8002594:	4293      	cmp	r3, r2
 8002596:	ddcb      	ble.n	8002530 <main+0x130>
		}
		deadloopprev = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		LCD_DisplayWholeString(0, pc);
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	4619      	mov	r1, r3
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 f80b 	bl	80025be <LCD_DisplayWholeString>
	{
 80025a8:	e7ab      	b.n	8002502 <main+0x102>
 80025aa:	bf00      	nop
 80025ac:	20000010 	.word	0x20000010
 80025b0:	40020000 	.word	0x40020000
 80025b4:	40011000 	.word	0x40011000

080025b8 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <sEE_TIMEOUT_UserCallback+0x4>

080025be <LCD_DisplayWholeString>:
  {
  }
}

void LCD_DisplayWholeString(uint8_t StartLine, char *ptr)
{
 80025be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025c2:	b08b      	sub	sp, #44	; 0x2c
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	466b      	mov	r3, sp
 80025ce:	461e      	mov	r6, r3
	sFONT *CurrentFont;
	CurrentFont = LCD_GetFont();
 80025d0:	f7ff f918 	bl	8001804 <LCD_GetFont>
 80025d4:	61b8      	str	r0, [r7, #24]
	uint16_t LineLength = (LCD_PIXEL_WIDTH / CurrentFont->Width);
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	889b      	ldrh	r3, [r3, #4]
 80025da:	22f0      	movs	r2, #240	; 0xf0
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	82fb      	strh	r3, [r7, #22]
	int16_t StringLength = strlen(ptr);
 80025e2:	6838      	ldr	r0, [r7, #0]
 80025e4:	f7fd fe02 	bl	80001ec <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	84fb      	strh	r3, [r7, #38]	; 0x26
	char *Segment = ptr;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	623b      	str	r3, [r7, #32]
	char LCDstring[LineLength];
 80025f0:	8af9      	ldrh	r1, [r7, #22]
 80025f2:	460b      	mov	r3, r1
 80025f4:	3b01      	subs	r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	b28a      	uxth	r2, r1
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8002602:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8002606:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 800260a:	b28a      	uxth	r2, r1
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	00dd      	lsls	r5, r3, #3
 8002612:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002616:	00d4      	lsls	r4, r2, #3
 8002618:	460b      	mov	r3, r1
 800261a:	3307      	adds	r3, #7
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	ebad 0d03 	sub.w	sp, sp, r3
 8002624:	466b      	mov	r3, sp
 8002626:	3300      	adds	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
	strncpy(LCDstring, ptr, LineLength);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8afa      	ldrh	r2, [r7, #22]
 800262e:	6839      	ldr	r1, [r7, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f957 	bl	80028e4 <strncpy>
	for (uint8_t CurrentLine = StartLine; StringLength > 0; CurrentLine+=CurrentFont->Height)
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	77fb      	strb	r3, [r7, #31]
 800263a:	e01b      	b.n	8002674 <LCD_DisplayWholeString+0xb6>
	{
		LCD_DisplayStringLine(CurrentLine, (uint8_t*) LCDstring);
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	b29b      	uxth	r3, r3
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f9c1 	bl	80019cc <LCD_DisplayStringLine>
		strncpy(LCDstring, Segment+=LineLength, LineLength);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	8afb      	ldrh	r3, [r7, #22]
 800264e:	6a3a      	ldr	r2, [r7, #32]
 8002650:	4413      	add	r3, r2
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	8afb      	ldrh	r3, [r7, #22]
 8002656:	461a      	mov	r2, r3
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	f000 f943 	bl	80028e4 <strncpy>
		StringLength -= LineLength;
 800265e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002660:	8afb      	ldrh	r3, [r7, #22]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b29b      	uxth	r3, r3
 8002666:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (uint8_t CurrentLine = StartLine; StringLength > 0; CurrentLine+=CurrentFont->Height)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	88db      	ldrh	r3, [r3, #6]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	7ffb      	ldrb	r3, [r7, #31]
 8002670:	4413      	add	r3, r2
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002678:	2b00      	cmp	r3, #0
 800267a:	dcdf      	bgt.n	800263c <LCD_DisplayWholeString+0x7e>
 800267c:	46b5      	mov	sp, r6
	}
}
 800267e:	bf00      	nop
 8002680:	372c      	adds	r7, #44	; 0x2c
 8002682:	46bd      	mov	sp, r7
 8002684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c0 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800268c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800268e:	e003      	b.n	8002698 <LoopCopyDataInit>

08002690 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002692:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002694:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002696:	3104      	adds	r1, #4

08002698 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002698:	480b      	ldr	r0, [pc, #44]	; (80026c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800269c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800269e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026a0:	d3f6      	bcc.n	8002690 <CopyDataInit>
  ldr  r2, =_sbss
 80026a2:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026a4:	e002      	b.n	80026ac <LoopFillZerobss>

080026a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026a8:	f842 3b04 	str.w	r3, [r2], #4

080026ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026b0:	d3f9      	bcc.n	80026a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026b2:	f000 f841 	bl	8002738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f000 f8f1 	bl	800289c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ba:	f7ff fea1 	bl	8002400 <main>
  bx  lr    
 80026be:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026c0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80026c4:	08003b00 	.word	0x08003b00
  ldr  r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026cc:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80026d0:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80026d4:	20000058 	.word	0x20000058

080026d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC_IRQHandler>

080026da <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
}
 80026de:	bf00      	nop
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <HardFault_Handler+0x4>

080026ee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80026f2:	e7fe      	b.n	80026f2 <MemManage_Handler+0x4>

080026f4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <BusFault_Handler+0x4>

080026fa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80026fe:	e7fe      	b.n	80026fe <UsageFault_Handler+0x4>

08002700 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <SystemInit+0x60>)
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <SystemInit+0x60>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800274c:	4a13      	ldr	r2, [pc, #76]	; (800279c <SystemInit+0x64>)
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <SystemInit+0x64>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <SystemInit+0x64>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800275e:	4a0f      	ldr	r2, [pc, #60]	; (800279c <SystemInit+0x64>)
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <SystemInit+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <SystemInit+0x64>)
 8002770:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <SystemInit+0x68>)
 8002772:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002774:	4a09      	ldr	r2, [pc, #36]	; (800279c <SystemInit+0x64>)
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <SystemInit+0x64>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <SystemInit+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002786:	f000 f80d 	bl	80027a4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800278a:	4b03      	ldr	r3, [pc, #12]	; (8002798 <SystemInit+0x60>)
 800278c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002790:	609a      	str	r2, [r3, #8]
#endif
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	40023800 	.word	0x40023800
 80027a0:	24003010 	.word	0x24003010

080027a4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	2300      	movs	r3, #0
 80027b0:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80027b2:	4a36      	ldr	r2, [pc, #216]	; (800288c <SetSysClock+0xe8>)
 80027b4:	4b35      	ldr	r3, [pc, #212]	; (800288c <SetSysClock+0xe8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <SetSysClock+0xe8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3301      	adds	r3, #1
 80027cc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <SetSysClock+0x38>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80027da:	d1f0      	bne.n	80027be <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <SetSysClock+0xe8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80027e8:	2301      	movs	r3, #1
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	e001      	b.n	80027f2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80027ee:	2300      	movs	r3, #0
 80027f0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <SetSysClock+0xe8>)
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <SetSysClock+0xec>)
 80027fc:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80027fe:	4a23      	ldr	r2, [pc, #140]	; (800288c <SetSysClock+0xe8>)
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <SetSysClock+0xe8>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <SetSysClock+0xf0>)
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <SetSysClock+0xf0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002814:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <SetSysClock+0xe8>)
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <SetSysClock+0xe8>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <SetSysClock+0xe8>)
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <SetSysClock+0xe8>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002828:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <SetSysClock+0xe8>)
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <SetSysClock+0xe8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002834:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <SetSysClock+0xe8>)
 8002838:	4b14      	ldr	r3, [pc, #80]	; (800288c <SetSysClock+0xe8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002840:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002842:	bf00      	nop
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <SetSysClock+0xe8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f9      	beq.n	8002844 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <SetSysClock+0xf4>)
 8002852:	f240 7205 	movw	r2, #1797	; 0x705
 8002856:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002858:	4a0c      	ldr	r2, [pc, #48]	; (800288c <SetSysClock+0xe8>)
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <SetSysClock+0xe8>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <SetSysClock+0xe8>)
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <SetSysClock+0xe8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002870:	bf00      	nop
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <SetSysClock+0xe8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	d1f9      	bne.n	8002872 <SetSysClock+0xce>
    {
    }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	07405a08 	.word	0x07405a08
 8002894:	40007000 	.word	0x40007000
 8002898:	40023c00 	.word	0x40023c00

0800289c <__libc_init_array>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	4e0d      	ldr	r6, [pc, #52]	; (80028d4 <__libc_init_array+0x38>)
 80028a0:	4c0d      	ldr	r4, [pc, #52]	; (80028d8 <__libc_init_array+0x3c>)
 80028a2:	1ba4      	subs	r4, r4, r6
 80028a4:	10a4      	asrs	r4, r4, #2
 80028a6:	2500      	movs	r5, #0
 80028a8:	42a5      	cmp	r5, r4
 80028aa:	d109      	bne.n	80028c0 <__libc_init_array+0x24>
 80028ac:	4e0b      	ldr	r6, [pc, #44]	; (80028dc <__libc_init_array+0x40>)
 80028ae:	4c0c      	ldr	r4, [pc, #48]	; (80028e0 <__libc_init_array+0x44>)
 80028b0:	f000 f82e 	bl	8002910 <_init>
 80028b4:	1ba4      	subs	r4, r4, r6
 80028b6:	10a4      	asrs	r4, r4, #2
 80028b8:	2500      	movs	r5, #0
 80028ba:	42a5      	cmp	r5, r4
 80028bc:	d105      	bne.n	80028ca <__libc_init_array+0x2e>
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c4:	4798      	blx	r3
 80028c6:	3501      	adds	r5, #1
 80028c8:	e7ee      	b.n	80028a8 <__libc_init_array+0xc>
 80028ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ce:	4798      	blx	r3
 80028d0:	3501      	adds	r5, #1
 80028d2:	e7f2      	b.n	80028ba <__libc_init_array+0x1e>
 80028d4:	08003af8 	.word	0x08003af8
 80028d8:	08003af8 	.word	0x08003af8
 80028dc:	08003af8 	.word	0x08003af8
 80028e0:	08003afc 	.word	0x08003afc

080028e4 <strncpy>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4604      	mov	r4, r0
 80028e8:	b902      	cbnz	r2, 80028ec <strncpy+0x8>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	4623      	mov	r3, r4
 80028ee:	f811 5b01 	ldrb.w	r5, [r1], #1
 80028f2:	f803 5b01 	strb.w	r5, [r3], #1
 80028f6:	1e56      	subs	r6, r2, #1
 80028f8:	b91d      	cbnz	r5, 8002902 <strncpy+0x1e>
 80028fa:	4414      	add	r4, r2
 80028fc:	42a3      	cmp	r3, r4
 80028fe:	d103      	bne.n	8002908 <strncpy+0x24>
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	461c      	mov	r4, r3
 8002904:	4632      	mov	r2, r6
 8002906:	e7ef      	b.n	80028e8 <strncpy+0x4>
 8002908:	f803 5b01 	strb.w	r5, [r3], #1
 800290c:	e7f6      	b.n	80028fc <strncpy+0x18>
	...

08002910 <_init>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr

0800291c <_fini>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr
